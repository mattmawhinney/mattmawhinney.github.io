%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: MF_PSchallange.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Administrator
%%CreationDate: 2/11/14
%%BoundingBox: 0 0 288 144
%%HiResBoundingBox: 0 0 288 144
%%CropBox: 0 0 288 144
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 64 8%%BeginData: 8398 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDCCFF%A8FD6DFF847D7DA8FD08FF847D7DAFFF7D7D59FD6CFF527D52FD09FF527D%52FFA87D527DA8FD6BFF7D597DA8FD08FF7D597DFFFF7D7D7DFD6CFF537D%53FD09FF537D53FD1FFFAFFFA8FD0BFFA8FD09FFA8FFA8FD09FFA8FFA8FD%07FFA8FFA8FD09FFA87D7EA8FF7D7D7D7EA8FFFFA87D7EA8FFFFFFA87E7D%A8FF7D527DA9A87D7D7DA8A9FFFF7D527DFFFF7DA87DFD04FFA8FD057DFF%FFFFA9AFA9FFFFFFA9AFAFFFFFFFA8A87DA87DA8A8FFFFFF84A8A8FFA8A8%7DA8A8FD04FFA97DA87DA87DA8A8FD04FFA87DA87DA87EFD05FFA8A87DA8%7DA8A8FD06FF7D53527D5353527D52597EFF7D5352A8FFFFFFA8525953FF%537D527D5259527D527DA8FF537D52FFA87D527DA8FFA87D5259527D5259%53FFFF14141484FF14141485FFFF7D7D7D847D7E7D7E84FFA87E7DA87D7E%7D7E7D7E7DFFFFA87D7E7D847D7E7D84A8FFA8A87D7E7D7E7D7E7DA8FFFF%7D847D7D7D847D7D7EFD05FFA8527D597D7D7E597D537DA9A8537DA8FFFF%FFA87D5384FF7D597D597D7D7D597D52A8FF7D537DFFFF597D7DFFFF7E59%7D59A87D7D597D7DFF141B1485FF1B141484FFA8A87DA8AFFFA8A87DA8FF%FF7DA87DA8A8A87EA87EA8A8FF7EA87DA8A8FF7EA87DA8FFA97DA87DA9A8%A87DA87EFFA8A87EA8A8FFA8A87DA8A8FD04FF7E59527D84FFFFA8537D52%A87D7D52A8FFFFFFA8527D7DFF597D527DA8FFFF84527D52FF7D7D52FFA8%7D527DA9A8527D52A8FFFF7D53527DA914141484FF14141485FFA87D7E84%FFFFFFA8A884FFA8A87D7EA8FFFFFF7DA87DA8A8A87DA8FFFFFFA87DA8A8%FF7DA87DA8FFFFA8847D84A8A87DA8A8FFFFFFA87E7DA8FD04FFA8537D7D%FD04FFA8537D7DA8597D7EFFFFFFA87D597DFF7D597DA8FFFFFFA97D597D%847D597DA8FF7D7D59FF847D5284FD04FF7DA87DFF1414148BFF1A141485%FFA8A87EA87EA8A8FD05FF7DA884FD05FF7DA87EFD05FFA8FF7EA87DA8A8%A87DA8FD04FFA8FFA8A87DA87EFFA9FFA8FF7DA87DFD04FF7D7D52A8FD04%FF7E7D527D7D7D52A8FFFFFFA8527D7DFF527D52FD05FF597D52A8597D52%FFA87D527DA87E52597DFD07FFA914141460FF14141485FFFF7D847D7E7D%847DA8A8FFA87E7DA8FD04FFA8847DA8A8FF7EA87D7D7D847D7E84AF7D7E%7DFD07FFA87E7D847D847D7E7D847D7EA8FFFFFFA8537DA8FD04FFAF597D%7DA8597D84FFFFFFA87D597EFF7D597DA8FD04FF84597D7E7E597DFFFF7D%7D59FF7D7D52A8FD08FF1414148BFF1B141B85FFFFFFA8A87DA87DA87DA8%FFFF7DA8A8FD05FF7DA884FF7EA87DA884AFA8A87DA9A8A87DA8FD08FF7D%A87EA8A8A884A8A8A884FD04FF7D7D52A8FD04FF7D7D527D7D7D52A8FFFF%FFA8527D7DFF537D53A9FD04FF597D52A8597D53FFA87D527DA8A852597D%FD04FFAFA8A8A81A141460FF14141485FD05FFAFA8A87D847DA8A87E7DA8%FD04FFA87E7DA8A87E7DA8A8FFFFFF7D7E84FF7D847DFD05FFA8A87EA87D%A8FD0CFFA8527D7DFD04FF7D527D7DA8527D7EFFFFFF7D7D527EFF7D537D%7EFFFFFFA87D537DA87D527DFFFF597D7DFF847D597DFFFFFFA9527D7DFF%14141485FF1B141484FF7EA87DFD04FFA87DA8A8FF7DA87DFD04FFA87DA8%84A87D84A8FFFFFFA8A87DA8A9A87DA8A8FFFFFF7DA87DA87DA87EFD05FF%A8A8A8FD04FF7D59527D7DA8A87D527D52A97D59527D7EA87D7D527D59FF%537D527D7DA8847D525959FF537D52FFA87D527DA8AF527D527DA8A87D7D%5284FF14141484FF14141485FFA87D7E7DFFA8AF7DA87DA8A8847D7E7DA8%A8A87DA87DA8A8847DA8A8FFA87E7D8484FF7D847D84A8AF7D7E7DA8FFA8%7D847DA8A8A87D7D7DA8FD04FFA8527D7D7D537D597D52A8FFFF537D597D%537D7D7D537EFF7D537D597D537D597D53FFFF7D537DFFFF597D7DFFFFA8%537D537D597D537DFFFF141B1485FF1B141484FFA8A87DA87DA87DA87DA8%FFFF7DA87DA87DA87DA87DA8FFFF7DA87DA87EA87DA87DA8FFFF7EA87DA8%7DA87DA8A9FFAFA87DA87DA87DA87DA8FD05FF7E5952A87D59527D527EFF%FFFFA8527D527D7DA8537D7DFF597D53A85959527D53A8FFFF7D7D52FFA8%7D527DA8FFFFA85259527D527DA8FFFF14141484FF14141485FFFFA8A87D%A87D847DA8A8FFA8A87DA8A8A87D847DA8FFFFFFA97D847DA8A8FF7DA87D%FFFFFF7E847DA87DA8A8FFFFFFA8A87D847DA87DA8AFFD05FFA8537D7DFF%A8A8A8FD07FFA8A8A8FFFFFFA8FFFFFFA8FFFFFFA8A8A8FFFFAFA9AFA8FF%FFFFA9FFA8FD05FFA8A884AFFD04FF1414148BFF1A141485FD05FFA8FFA8%FD05FF7DA8A8FFFFFFA8FD07FFA9FD0DFFA8FD09FFA9FFA8FD08FF7D7D52%84FD1DFF85141414FD13FFA914141460FF14141485FD0CFFA87E7DA8FD2E%FFA8527D7DFD1DFF8514141BFD14FF1414148BFF1B141B85FD0DFF7DA884%FD2EFFA87D7DA8FD16FFA9AFA8FD04FF85141414FFFFAF84FD07FFAFAFA9%AFA9FD04FF1A141460FF14141485FD04FFA9A984AFFD04FFA8A8A8FFFFFF%84AFFD08FFA9AFFD0AFFA98584FD2BFF85FD051461FFFF8414141B841B14%141461FD04FF60FD051436AFFFFF14141485FF1B141484FFFFAF141B1414%141B85FFFF61141A84851414141B60FD04FF611414141A8461141A85FFFF%AFFD05143DA9FD27FF3DFD07143CFF85FD09143DFFFF36FD0814AFFF1414%1484FF14141485FF85FD081460FFFD0A1460FFFF3CFD091485FF85FD0814%84FD25FF8B1414143D603D141B14AF851B14141461601B141B14FFA91B14%14368B6014141B60FF141B1485FF1B141484FF1414141B6085141B1414A9%611414141B6061141B141BFF8B1414141B603D141B1414A9FF1414143D60%61141B141AAFFD24FFFD0414FFFFFF141414368514141485FFFFA9141414%8485141414FFFFFF14141461FF14141484FF1414148584141414A9FFFFFF%1414146036141414A9FFFF61141414FFFD0414A9FFFF60141414AF361414%3CFD04FF14141485FD23FFAF14141485FFFFFFA98560AF8514141BFD04FF%1414148BFD04FFA98B601B141436FF1414148BFF1A14148561141436AF84%AFA9611414143D141460FFFFFF8514141BAF14141485FD04FF141414851B%141460AF84AFA93D14143CFD23FFAF141414AFFD07FF85141414FFFFFFAF%14141460FFA83CFD071460FF14141460FF1414148536FD0E1461FFFFFFAF%141414AF141414AFFD04FF14141485FD0B143CFD23FFAF14141BAFFD07FF%8514141BFD04FF141414AFAF14141B141B603D14143CFF1414148BFF1B14%1B8561141B1414141B141A141B143D141B60FFFFFF8514141BA914141BA9%FD04FF1B141B851B141B1414141B141A141B36FD23FFAF1414148BFFFFFF%AF5A618485141414FD04FF1A14148461141414AFFFFF60141460FF1A1414%60FF1414148536141461FFFFA9FD05FF14141461FFFFFFAF141414AF1414%1485FD04FF1414148514141485FFFFA9FD29FF1B141436FFFFFF14141461%8414141AFD04FF1414148514141485FFFFFF3D141460FF14141485FF1B14%148485141414FD04FF853C61603D141460FFFFFF84141414FF3D141414FF%FFFF361414148561141436FD04FF853C6184FD24FF5A1414143685361414%14A885141414FD04FF141414843C141414AFA86114141461FF14141484FF%14141485A8FD04148584601414146136141461FFFFFF85141414FF60FD04%143CFD0514AF84FD041485843C14141485FD25FF1414141B1414141B60FF%841B141BFD04FF141B148B841A1414141B1414141B14FF141B1485FF1B14%1484FF8514141B1414141B143DFF3D141460FFFFFF851B1414FFFF3C1414%1B1414141B141485FF6014141B1414141B1461FD27FFFD06145AFFFF8514%1436FD04FF3C141484FF36FD0414618414141AA93C141484FF14141485FF%FF84FD061461FFFF36141485FFFFFFAF141414FFFFFF6014141436AF1414%1485FFFF60FD061485FD29FFAF8B85AFFD12FFA9AF85FD14FFAF848585FD%15FFAFFFFF1A141485FD04FFAF848BA9FD2AFFCACFA8CFFFAFA8AFA8FFA8%A8A8A97DA87DA8FD07FFA8A8FFA8A8A8FD09FFA8FFA8A87DA8FD0CFFA8FD%05FFA8FD09FF14141485FD33FF7B8181FF141414FF784D46A2FFFFA8FF7E%A8A8FFA8FFFFFF7DA8FFA87DFFA8A8A8FFFD05A8FFFFA8A8FFFFAF84FFA8%FFA8FFA8A8FFFFFD05A8A97DFFFFA8A8FFA8A8A8FFFF3D141B85FD32FFA8%817A81AF141414A87E224D77FFA8A8FFA8A8A87DA87DA9FFA87DFF7DA8A8%A884A87DA87EFD04A8FFA87E84A884AF7DA8FFA87DA8A8A87DFF7DA884FD%07A87DA8A8A8FFFF141414AFFD32FFCF7BA5A6FF361B14FF7E714DA2FFFF%A8FFA8FFFD05A8FF7EA87DFD05A87EA8A8FFA8FF84A8FFA8A8FFA8A9FFA8%7DFFA8A8A8FF7DA8FFA884A87DA9A8A97DFFFF7EA8FFA8FFFF3D141484FD%34FFA8FFFFFFA9FFFFFFA8FFFFFFA8A8FFFD05A87DFFFFA8A884FD04A87E%A87DFFA8A9A8A8A8FFA8A8FFFF7DA8A8A87DA8A8FFA8A87EA87DA884847E%A8A8A87DFD05A8FFFF14141485FD47FFA9FD23FFA8FD09FFA9AFA9FD04FF%3D1414A9FD74FF6014141460FFFF85141414AFFD75FFFD05141B1414141B%FD76FFAFFD071436A8FD78FF8585608585AFFDFCFFFD9EFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: (PANTONE 430 C)
%%+ (PANTONE 2593 C)
%%+ (PANTONE 312 C)
%%+ (PANTONE 583 C)
%%CMYKCustomColor: 0.0501 0 0 0.4500 (PANTONE 430 C)
%%+ 0.6101 0.8900 0 0 (PANTONE 2593 C)
%%+ 0.9601 0 0.1100 0 (PANTONE 312 C)
%%+ 0.2300 0 1 0.1700 (PANTONE 583 C)
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">MF_PSchallange</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2014-02-11T10:27:37-05:00</xap:CreateDate>
         <xap:ModifyDate>2014-02-11T10:27:38-05:00</xap:ModifyDate>
         <xap:MetadataDate>2014-02-11T10:27:38-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>128</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;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&#xA;CgeAAykkncuXGIAocl2BLsVdirsVdirsVf/Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:EBF14A759994E3119B05A550612186FD</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:ECF14A759994E3119B05A550612186FD</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:3bb65f60-3ab2-dd42-ab5c-765cdceeb56a</stRef:instanceID>
            <stRef:documentID>xmp.did:03801174072068118C14AA9557E29AED</stRef:documentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>4.000000</stDim:w>
            <stDim:h>2.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>PANTONE 583 C</rdf:li>
               <rdf:li>PANTONE 430 C</rdf:li>
               <rdf:li>PANTONE 2593 C</rdf:li>
               <rdf:li>PANTONE 312 C</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 2593 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>61.000103</xapG:cyan>
                           <xapG:magenta>88.999901</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 312 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>96.000702</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>11.000100</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 430 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>5.000310</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>44.999702</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 583 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>22.999599</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>16.999800</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -144 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 144 li
288 144 li
288 0 li
cp
clp
[1 0 0 1 0 0 ]ct
60.4888 116.856 mo
66.9521 116.856 li
66.9521 123.237 li
60.4888 123.237 li
60.4888 116.856 li
cp
false sop
/0 
<<
/Name (PANTONE 583 C)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0.229996 0 1 0.169998 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
70.2231 116.856 mo
76.686 116.856 li
76.686 123.237 li
70.2231 123.237 li
70.2231 116.856 li
cp
/1 
<<
/Name (PANTONE 312 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0.960007 0 0.110001 0 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
1 sep
f
79.959 116.856 mo
86.4209 116.856 li
86.4209 123.237 li
79.959 123.237 li
79.959 116.856 li
cp
/2 
<<
/Name (PANTONE 2593 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0.610001 0.889999 0 0 ] 
>>
/CSD add_res
1 /2 /CSD get_res sepcs
1 sep
f
134.83 77.9023 mo
132.42 77.9023 li
132.42 72.9229 li
134.83 72.9229 li
134.83 77.9023 li
cp
0 0 0 0 cmyk
f
gsave
0 0 mo
288 0 li
288 144 li
0 144 li
0 0 li
cp
clp
22.6841 58.0386 mo
21.748 56.4775 20.231 55.6948 18.1323 55.6948 cv
15.6089 55.6948 13.876 56.8794 12.9341 59.2466 cv
12.4453 60.5044 12.2002 62.0977 12.2002 64.0327 cv
12.2002 67.0918 13.021 69.2427 14.6641 70.4834 cv
15.6401 71.2075 16.7949 71.5708 18.1299 71.5708 cv
20.0669 71.5708 21.5439 70.8306 22.562 69.3496 cv
23.5801 67.8657 24.0879 65.8916 24.0879 63.4277 cv
24.0879 61.3984 23.6211 59.6016 22.6841 58.0386 cv
27.9702 53.0854 mo
30.1182 55.3564 31.1919 58.6914 31.1919 63.0898 cv
31.1919 67.7275 30.1431 71.2646 28.043 73.6982 cv
25.9429 76.1309 23.2412 77.3447 19.9331 77.3447 cv
17.8242 77.3447 16.0732 76.8223 14.6792 75.7754 cv
13.917 75.1963 13.1719 74.3477 12.4419 73.2383 cv
12.4419 84.7334 li
5.62793 84.7334 li
5.62793 50.2598 li
12.2241 50.2598 li
12.2241 54.1475 li
12.9702 53.0054 13.7651 52.1025 14.6079 51.4424 cv
16.1479 50.2666 17.979 49.6797 20.103 49.6797 cv
23.2002 49.6797 25.8223 50.8135 27.9702 53.0854 cv
/3 
<<
/Name (PANTONE 430 C)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0.0500031 0 0 0.449997 ] 
>>
/CSD add_res
1 /3 /CSD get_res sepcs
1 sep
f
39.1997 50.2598 mo
39.1997 66.1338 li
39.1997 67.6318 39.3755 68.7598 39.7285 69.5156 cv
40.3535 70.855 41.5806 71.5229 43.4067 71.5229 cv
45.7456 71.5229 47.3496 70.5708 48.2158 68.6719 cv
48.6646 67.6396 48.8887 66.2798 48.8887 64.5879 cv
48.8887 50.2598 li
55.8726 50.2598 li
55.8726 76.5977 li
49.1797 76.5977 li
49.1797 72.876 li
49.1157 72.9556 48.9546 73.1973 48.6978 73.5986 cv
48.4409 74.0029 48.1357 74.3555 47.7817 74.6631 cv
46.7036 75.6289 45.6636 76.29 44.6606 76.6445 cv
43.6577 77 42.4805 77.1758 41.1309 77.1758 cv
37.2437 77.1758 34.6279 75.7754 33.2759 72.9717 cv
32.5205 71.4258 32.1445 69.147 32.1445 66.1338 cv
32.1445 50.2598 li
39.1997 50.2598 li
cp
f
75.5854 69.4678 mo
76.5762 68.0337 77.0732 66.1499 77.0732 63.8159 cv
77.0732 61.9458 76.8296 60.3989 76.3403 59.1748 cv
75.4155 56.856 73.7104 55.6948 71.2256 55.6948 cv
68.7085 55.6948 66.9775 56.832 66.0366 59.103 cv
65.5483 60.3096 65.3066 61.874 65.3066 63.7886 cv
65.3066 66.0449 65.8096 67.9126 66.8154 69.395 cv
67.8223 70.8779 69.3564 71.6187 71.4204 71.6187 cv
73.2065 71.6187 74.5942 70.9028 75.5854 69.4678 cv
81.3394 53.4248 mo
83.3115 55.9209 84.2954 59.1416 84.2954 63.0898 cv
84.2954 67.1807 83.3242 70.5708 81.3804 73.2607 cv
79.4395 75.9521 76.7266 77.2969 73.2476 77.2969 cv
71.0615 77.2969 69.3032 76.8604 67.9756 75.9932 cv
67.1846 75.4775 66.3232 74.5742 65.4023 73.2861 cv
65.4023 76.5977 li
58.6113 76.5977 li
58.6113 41.0288 li
65.4995 41.0288 li
65.4995 53.6909 li
66.3726 52.4668 67.3384 51.5317 68.3936 50.8887 cv
69.6396 50.0806 71.2285 49.6787 73.1572 49.6787 cv
76.6436 49.6787 79.3716 50.9268 81.3394 53.4248 cv
f
92.4009 76.5977 mo
85.5161 76.5977 li
85.5161 40.981 li
92.4009 40.981 li
92.4009 76.5977 li
cp
f
96.7422 50.2598 mo
103.724 50.2598 li
103.724 76.5977 li
96.7422 76.5977 li
96.7422 50.2598 li
cp
103.724 47.1191 mo
96.7422 47.1191 li
96.7422 40.7642 li
103.724 40.7642 li
103.724 47.1191 li
cp
f
123.672 59.7056 mo
123.544 58.7256 123.212 57.8384 122.68 57.0488 cv
121.905 55.9854 120.701 55.4536 119.07 55.4536 cv
116.743 55.4536 115.154 56.6055 114.299 58.9106 cv
113.846 60.1304 113.622 61.7544 113.622 63.7788 cv
113.622 65.7065 113.846 67.2578 114.299 68.4297 cv
115.124 70.6196 116.673 71.7134 118.951 71.7134 cv
120.563 71.7134 121.711 71.2798 122.39 70.4116 cv
123.067 69.5386 123.479 68.4146 123.625 67.0278 cv
130.655 67.0278 li
130.495 69.1226 129.738 71.1025 128.382 72.9717 cv
126.22 75.9863 123.021 77.4912 118.779 77.4912 cv
114.54 77.4912 111.418 76.2334 109.419 73.7207 cv
107.42 71.2075 106.42 67.9507 106.42 63.9468 cv
106.42 59.4297 107.525 55.9136 109.732 53.4014 cv
111.942 50.8887 114.989 49.6304 118.877 49.6304 cv
122.183 49.6304 124.886 50.3706 126.989 51.8545 cv
129.094 53.3354 130.341 55.9526 130.729 59.7056 cv
123.672 59.7056 li
cp
f
162.149 67.73 mo
162.295 68.9541 162.612 69.8232 163.098 70.3389 cv
163.955 71.2568 165.54 71.7158 167.856 71.7158 cv
169.215 71.7158 170.297 71.5151 171.097 71.1108 cv
171.899 70.71 172.299 70.105 172.299 69.2988 cv
172.299 68.5269 171.977 67.939 171.33 67.5371 cv
170.685 67.1348 168.284 66.4419 164.128 65.458 cv
161.135 64.7158 159.026 63.791 157.8 62.6802 cv
156.576 61.584 155.964 60.0059 155.964 57.9438 cv
155.964 55.5112 156.922 53.4209 158.835 51.6719 cv
160.747 49.9258 163.44 49.0518 166.91 49.0518 cv
170.204 49.0518 172.887 49.709 174.96 51.022 cv
177.034 52.334 178.227 54.6011 178.532 57.8218 cv
171.646 57.8218 li
171.55 56.937 171.299 56.2368 170.896 55.7212 cv
170.137 54.7861 168.844 54.3188 167.02 54.3188 cv
165.517 54.3188 164.446 54.5532 163.81 55.02 cv
163.17 55.4868 162.851 56.0342 162.851 56.6631 cv
162.851 57.4531 163.19 58.0239 163.869 58.3779 cv
164.547 58.749 166.944 59.3838 171.061 60.2881 cv
173.802 60.9321 175.859 61.9048 177.229 63.2109 cv
178.58 64.5332 179.259 66.1841 179.259 68.1641 cv
179.259 70.7749 178.284 72.9028 176.34 74.5557 cv
174.396 76.2061 171.389 77.0332 167.321 77.0332 cv
163.173 77.0332 160.11 76.1582 158.134 74.4111 cv
156.156 72.6621 155.168 70.436 155.168 67.73 cv
162.149 67.73 li
cp
1 /3 /CSD get_res sepcs
0.62 sep
f
198.72 57.5811 mo
197.783 56.019 196.268 55.2373 194.168 55.2373 cv
191.645 55.2373 189.912 56.4219 188.97 58.79 cv
188.48 60.0469 188.235 61.6411 188.235 63.5742 cv
188.235 66.6343 189.059 68.7852 190.699 70.0259 cv
191.677 70.748 192.832 71.1113 194.167 71.1113 cv
196.104 71.1113 197.582 70.3721 198.599 68.8892 cv
199.615 67.4072 200.126 65.4351 200.126 62.9692 cv
200.126 60.9409 199.657 59.144 198.72 57.5811 cv
204.006 52.627 mo
206.154 54.8989 207.227 58.2329 207.227 62.6299 cv
207.227 67.27 206.177 70.8062 204.079 73.2383 cv
201.979 75.6699 199.276 76.8887 195.967 76.8887 cv
193.86 76.8887 192.109 76.3643 190.715 75.3164 cv
189.954 74.7363 189.208 73.8936 188.477 72.7793 cv
188.477 84.1436 li
181.665 84.1436 li
181.665 49.8013 li
188.26 49.8013 li
188.26 53.6919 li
189.006 52.5483 189.801 51.644 190.644 50.9839 cv
192.184 49.8091 194.015 49.2212 196.14 49.2212 cv
199.235 49.2212 201.859 50.356 204.006 52.627 cv
f
224.254 63.333 mo
223.812 63.606 223.368 63.8291 222.92 63.9971 cv
222.469 64.166 221.853 64.3232 221.069 64.4678 cv
219.501 64.7568 li
218.032 65.0151 216.977 65.3291 216.336 65.6992 cv
215.252 66.3281 214.71 67.3042 214.71 68.624 cv
214.71 69.7998 215.04 70.647 215.704 71.1719 cv
216.366 71.6968 217.171 71.957 218.119 71.957 cv
219.626 71.957 221.012 71.5239 222.279 70.6519 cv
223.546 69.7842 224.205 68.1968 224.254 65.895 cv
224.254 63.333 li
cp
220.043 60.1182 mo
221.324 59.958 222.241 59.7559 222.793 59.5151 cv
223.781 59.0962 224.278 58.4429 224.278 57.5571 cv
224.278 56.478 223.898 55.731 223.139 55.3218 cv
222.379 54.9131 221.266 54.7061 219.795 54.7061 cv
218.146 54.7061 216.979 55.1089 216.293 55.9131 cv
215.803 56.5112 215.477 57.3149 215.314 58.3301 cv
208.668 58.3301 li
208.814 56.0269 209.461 54.1328 210.607 52.6519 cv
212.439 50.332 215.576 49.1719 220.025 49.1719 cv
222.922 49.1719 225.494 49.7441 227.745 50.8892 cv
229.99 52.0322 231.115 54.1909 231.115 57.3638 cv
231.115 69.4448 li
231.115 70.2832 231.132 71.2969 231.164 72.4902 cv
231.212 73.3906 231.351 74.0029 231.575 74.3252 cv
231.802 74.6484 232.138 74.9141 232.59 75.123 cv
232.59 76.1377 li
225.1 76.1377 li
224.891 75.6074 224.744 75.1074 224.664 74.6406 cv
224.584 74.1729 224.519 73.6416 224.47 73.0449 cv
223.516 74.0771 222.414 74.9551 221.166 75.6787 cv
219.674 76.5332 217.991 76.9609 216.112 76.9609 cv
213.713 76.9609 211.731 76.2803 210.171 74.917 cv
208.604 73.5566 207.823 71.627 207.823 69.1289 cv
207.823 65.895 209.08 63.5498 211.596 62.1001 cv
212.976 61.3101 215.005 60.7471 217.682 60.4058 cv
220.043 60.1182 li
cp
f
250.412 59.2495 mo
250.281 58.2646 249.951 57.3794 249.419 56.5903 cv
248.645 55.5254 247.441 54.9956 245.81 54.9956 cv
243.483 54.9956 241.896 56.1465 241.039 58.4507 cv
240.586 59.6714 240.36 61.2954 240.36 63.3193 cv
240.36 65.2485 240.586 66.7983 241.039 67.9707 cv
241.86 70.1616 243.412 71.2563 245.689 71.2563 cv
247.303 71.2563 248.451 70.8237 249.127 69.9536 cv
249.807 69.0815 250.218 67.9546 250.364 66.5684 cv
257.394 66.5684 li
257.234 68.6646 256.475 70.6445 255.122 72.5137 cv
252.961 75.5264 249.76 77.0332 245.521 77.0332 cv
241.278 77.0332 238.158 75.7754 236.159 73.2637 cv
234.159 70.7485 233.159 67.4937 233.159 63.4883 cv
233.159 58.9717 234.265 55.4536 236.473 52.9424 cv
238.683 50.4287 241.729 49.1724 245.615 49.1724 cv
248.922 49.1724 251.625 49.9136 253.729 51.3965 cv
255.835 52.8774 257.079 55.4946 257.467 59.2495 cv
250.412 59.2495 li
cp
f
266.566 56.2827 mo
265.593 57.2856 264.981 58.6445 264.731 60.3608 cv
276.595 60.3608 li
276.471 58.5317 275.857 57.1445 274.761 56.1978 cv
273.662 55.2515 272.303 54.7788 270.676 54.7788 cv
268.909 54.7788 267.538 55.2798 266.566 56.2827 cv
276.868 50.3335 mo
278.706 51.1577 280.223 52.4546 281.418 54.2295 cv
282.5 55.7949 283.198 57.6108 283.519 59.6748 cv
283.703 60.8857 283.778 62.6289 283.745 64.9038 cv
264.562 64.9038 li
264.668 67.5449 265.588 69.3965 267.318 70.4585 cv
268.368 71.1206 269.633 71.4497 271.112 71.4497 cv
272.682 71.4497 273.956 71.0469 274.938 70.2427 cv
275.472 69.8057 275.944 69.2036 276.356 68.4307 cv
283.385 68.4307 li
283.2 69.9917 282.35 71.5786 280.832 73.1914 cv
278.473 75.752 275.169 77.0322 270.923 77.0322 cv
267.417 77.0322 264.325 75.9521 261.646 73.792 cv
258.967 71.6318 257.629 68.1157 257.629 63.2476 cv
257.629 58.6836 258.836 55.1865 261.256 52.7515 cv
263.673 50.3169 266.813 49.0996 270.672 49.0996 cv
272.966 49.0996 275.03 49.5117 276.868 50.3335 cv
f
71.0327 95.3232 mo
70.9048 94.3408 70.5737 93.4541 70.0386 92.666 cv
69.2646 91.6016 68.0615 91.0713 66.4297 91.0713 cv
64.1045 91.0713 62.5156 92.2197 61.6597 94.5264 cv
61.2075 95.7461 60.9805 97.3711 60.9805 99.3936 cv
60.9805 101.323 61.2075 102.873 61.6597 104.044 cv
62.4829 106.234 64.0337 107.33 66.3096 107.33 cv
67.9268 107.33 69.0728 106.896 69.7495 106.026 cv
70.4268 105.154 70.8398 104.03 70.9849 102.642 cv
78.0166 102.642 li
77.8535 104.737 77.0957 106.72 75.7437 108.588 cv
73.5806 111.602 70.3799 113.108 66.1406 113.108 cv
61.8989 113.108 58.7798 111.849 56.7808 109.337 cv
54.7808 106.825 53.7798 103.565 53.7798 99.5625 cv
53.7798 95.0449 54.8857 91.5283 57.0938 89.0156 cv
59.3037 86.5029 62.3506 85.248 66.2358 85.248 cv
69.5415 85.248 72.2456 85.9883 74.3506 87.4688 cv
76.4556 88.9512 77.7007 91.5684 78.0879 95.3232 cv
71.0327 95.3232 li
cp
1 /1 /CSD get_res sepcs
1 sep
f
99.2554 86.0215 mo
100.579 86.585 101.665 87.4473 102.516 88.6074 cv
103.236 89.5928 103.676 90.6035 103.837 91.6436 cv
103.999 92.6846 104.078 94.3789 104.078 96.7334 cv
104.078 112.214 li
97.0474 112.214 li
97.0474 96.1748 li
97.0474 94.7539 96.8076 93.6094 96.3286 92.7393 cv
95.7036 91.5146 94.5215 90.9004 92.7793 90.9004 cv
90.9702 90.9004 89.6006 91.5088 88.6646 92.7275 cv
87.7285 93.9453 87.2603 95.6807 87.2603 97.9404 cv
87.2603 112.214 li
80.3745 112.214 li
80.3745 78.6338 li
87.2603 78.6338 li
87.2603 89.2822 li
88.2554 87.752 89.4053 86.6836 90.7144 86.0811 cv
92.0215 85.4766 93.3965 85.1738 94.8384 85.1738 cv
96.4595 85.1738 97.9316 85.459 99.2554 86.0215 cv
f
122.723 99.4043 mo
122.282 99.6787 121.834 99.9004 121.388 100.071 cv
120.938 100.239 120.322 100.396 119.536 100.542 cv
117.973 100.833 li
116.499 101.091 115.446 101.403 114.806 101.774 cv
113.72 102.401 113.179 103.377 113.179 104.697 cv
113.179 105.875 113.511 106.725 114.173 107.247 cv
114.834 107.77 115.64 108.032 116.588 108.032 cv
118.093 108.032 119.479 107.598 120.746 106.729 cv
122.015 105.858 122.674 104.27 122.723 101.968 cv
122.723 99.4043 li
cp
118.512 96.1914 mo
119.792 96.0322 120.709 95.8291 121.262 95.5879 cv
122.25 95.1689 122.747 94.5166 122.747 93.6299 cv
122.747 92.5508 122.368 91.8076 121.608 91.3955 cv
120.848 90.9834 119.735 90.7803 118.266 90.7803 cv
116.616 90.7803 115.447 91.1826 114.761 91.9893 cv
114.271 92.585 113.946 93.3887 113.784 94.4043 cv
107.138 94.4043 li
107.282 92.1006 107.93 90.209 109.078 88.7256 cv
110.908 86.4072 114.044 85.248 118.495 85.248 cv
121.39 85.248 123.963 85.8174 126.212 86.9619 cv
128.461 88.1055 129.583 90.2646 129.583 93.4365 cv
129.583 105.521 li
129.583 106.357 129.601 107.373 129.631 108.563 cv
129.681 109.469 129.82 110.079 130.044 110.4 cv
130.27 110.723 130.607 110.989 131.059 111.196 cv
131.059 112.214 li
123.567 112.214 li
123.359 111.681 123.213 111.183 123.134 110.715 cv
123.053 110.247 122.987 109.715 122.94 109.12 cv
121.985 110.15 120.882 111.027 119.636 111.754 cv
118.145 112.605 116.458 113.035 114.58 113.035 cv
112.181 113.035 110.2 112.354 108.638 110.992 cv
107.073 109.632 106.292 107.702 106.292 105.205 cv
106.292 101.968 107.548 99.624 110.065 98.1738 cv
111.445 97.3848 113.472 96.8203 116.15 96.4814 cv
118.512 96.1914 li
cp
f
162.535 92.3584 mo
161.561 93.3613 160.951 94.7188 160.701 96.4336 cv
172.565 96.4336 li
172.439 94.6055 171.828 93.2188 170.73 92.2705 cv
169.632 91.3271 168.271 90.8525 166.646 90.8525 cv
164.879 90.8525 163.507 91.3545 162.535 92.3584 cv
172.837 86.4092 mo
174.675 87.2305 176.193 88.5303 177.389 90.3037 cv
178.468 91.8682 179.167 93.6836 179.487 95.75 cv
179.672 96.959 179.747 98.7012 179.715 100.978 cv
160.531 100.978 li
160.64 103.619 161.557 105.471 163.287 106.535 cv
164.337 107.193 165.603 107.524 167.082 107.524 cv
168.651 107.524 169.925 107.12 170.906 106.315 cv
171.442 105.882 171.914 105.277 172.325 104.502 cv
179.354 104.502 li
179.169 106.067 178.318 107.653 176.801 109.265 cv
174.441 111.825 171.14 113.108 166.893 113.108 cv
163.39 113.108 160.294 112.028 157.616 109.865 cv
154.937 107.708 153.598 104.19 153.598 99.3223 cv
153.598 94.7578 154.807 91.2607 157.227 88.8262 cv
159.645 86.3906 162.783 85.1738 166.643 85.1738 cv
168.935 85.1738 171.001 85.5859 172.837 86.4092 cv
f
201.959 87.3848 mo
203.686 88.8135 204.549 91.1738 204.549 94.4756 cv
204.549 112.214 li
197.491 112.214 li
197.491 96.1914 li
197.491 94.8076 197.308 93.7451 196.941 93.0039 cv
196.27 91.6504 194.988 90.9727 193.103 90.9727 cv
190.784 90.9727 189.193 91.9629 188.328 93.9453 cv
187.88 94.9922 187.657 96.3301 187.657 97.9551 cv
187.657 112.214 li
180.771 112.214 li
180.771 85.9229 li
187.441 85.9229 li
187.441 89.7646 li
188.322 88.4111 189.157 87.4355 189.943 86.8428 cv
191.353 85.7783 193.144 85.248 195.307 85.248 cv
198.019 85.248 200.234 85.958 201.959 87.3848 cv
f
223.851 104.734 mo
224.957 103.521 225.511 101.58 225.511 98.9219 cv
225.511 96.4238 224.984 94.5264 223.934 93.2197 cv
222.884 91.917 221.476 91.2617 219.713 91.2617 cv
217.305 91.2617 215.645 92.3994 214.73 94.6719 cv
214.25 95.877 214.009 97.3682 214.009 99.1426 cv
214.009 100.672 214.267 102.032 214.779 103.225 cv
215.71 105.446 217.377 106.559 219.783 106.559 cv
221.389 106.559 222.742 105.951 223.851 104.734 cv
221.505 85.8506 mo
223.177 86.5449 224.528 87.8154 225.558 89.667 cv
225.558 85.875 li
232.276 85.875 li
232.276 110.86 li
232.276 114.258 232.432 129.839 231.29 131.561 cv
229.324 134.526 225.556 136.008 219.981 136.008 cv
216.613 136.008 213.868 135.346 211.741 134.026 cv
209.615 132.703 208.438 130.729 208.213 128.105 cv
215.705 128.105 li
215.897 128.913 216.211 129.492 216.647 129.845 cv
217.388 130.474 218.637 130.789 220.392 130.789 cv
222.872 130.789 224.532 129.959 225.368 128.299 cv
225.916 127.236 225.461 112.431 225.461 109.918 cv
225.461 108.226 li
224.801 109.354 224.092 110.199 223.336 110.763 cv
221.966 111.811 220.186 112.333 217.997 112.333 cv
214.612 112.333 211.91 111.145 209.89 108.771 cv
207.868 106.394 206.855 103.175 206.855 99.1162 cv
206.855 95.2002 207.83 91.9102 209.775 89.2461 cv
211.722 86.5801 214.482 85.248 218.054 85.248 cv
219.373 85.248 220.521 85.4482 221.505 85.8506 cv
f
243.091 92.3584 mo
242.117 93.3613 241.505 94.7188 241.255 96.4336 cv
253.12 96.4336 li
252.994 94.6055 252.383 93.2188 251.285 92.2705 cv
250.186 91.3271 248.827 90.8525 247.201 90.8525 cv
245.432 90.8525 244.063 91.3545 243.091 92.3584 cv
253.392 86.4092 mo
255.23 87.2305 256.747 88.5303 257.943 90.3037 cv
259.022 91.8682 259.722 93.6836 260.042 95.75 cv
260.226 96.959 260.302 98.7012 260.27 100.978 cv
241.086 100.978 li
241.193 103.619 242.111 105.471 243.842 106.535 cv
244.892 107.193 246.157 107.524 247.637 107.524 cv
249.205 107.524 250.479 107.12 251.462 106.315 cv
251.995 105.882 252.468 105.277 252.88 104.502 cv
259.908 104.502 li
259.725 106.067 258.873 107.653 257.356 109.265 cv
254.996 111.825 251.693 113.108 247.445 113.108 cv
243.943 113.108 240.849 112.028 238.171 109.865 cv
235.49 107.708 234.151 104.19 234.151 99.3223 cv
234.151 94.7578 235.36 91.2607 237.78 88.8262 cv
240.198 86.3906 243.337 85.1738 247.199 85.1738 cv
249.489 85.1738 251.555 85.5859 253.392 86.4092 cv
f
138.706 56.9482 mo
137.195 56.9482 li
137.195 54.0439 li
138.706 54.0439 li
138.706 56.9482 li
cp
0 0 0 0 cmyk
f
138.369 56.9609 mo
135.019 56.9609 li
135.019 54.0552 li
138.369 54.0552 li
138.369 56.9609 li
cp
f
138.632 65.9458 mo
137.122 65.9458 li
137.122 63.0439 li
138.632 63.0439 li
138.632 65.9458 li
cp
f
138.625 70.1919 mo
137.114 70.1919 li
137.114 67.2871 li
138.625 67.2871 li
138.625 70.1919 li
cp
f
138.703 74.2168 mo
137.192 74.2168 li
137.192 71.313 li
138.703 71.313 li
138.703 74.2168 li
cp
f
136.238 74.2285 mo
134.727 74.2285 li
134.727 71.3242 li
136.238 71.3242 li
136.238 74.2285 li
cp
f
136.202 82.8818 mo
134.694 82.8818 li
134.694 79.9775 li
136.202 79.9775 li
136.202 82.8818 li
cp
f
138.659 87.1152 mo
137.15 87.1152 li
137.15 84.2119 li
138.659 84.2119 li
138.659 87.1152 li
cp
f
138.739 91.1396 mo
137.228 91.1396 li
137.228 84.2119 li
138.739 84.2119 li
138.739 91.1396 li
cp
f
136.263 95.3975 mo
134.755 95.3975 li
134.755 92.4932 li
136.263 92.4932 li
136.263 95.3975 li
cp
f
149.979 89.6719 mo
148.468 89.6719 li
148.468 91.2578 li
149.979 91.2578 li
149.979 89.6719 li
cp
f
147.513 89.665 mo
146.004 89.665 li
146.004 91.251 li
147.513 91.251 li
147.513 89.665 li
cp
f
149.971 87.3564 mo
148.46 87.3564 li
148.46 88.9424 li
149.971 88.9424 li
149.971 87.3564 li
cp
f
147.503 87.3516 mo
145.995 87.3516 li
145.995 88.9355 li
147.503 88.9355 li
147.503 87.3516 li
cp
f
149.906 84.7637 mo
148.394 84.7637 li
148.394 86.3477 li
149.906 86.3477 li
149.906 84.7637 li
cp
f
149.898 82.4482 mo
148.386 82.4482 li
148.386 84.0322 li
149.898 84.0322 li
149.898 82.4482 li
cp
f
149.977 80.2529 mo
148.467 80.2529 li
148.467 81.8359 li
149.977 81.8359 li
149.977 80.2529 li
cp
f
147.51 80.2471 mo
146.002 80.2471 li
146.002 81.8311 li
147.51 81.8311 li
147.51 80.2471 li
cp
f
147.475 75.5264 mo
145.966 75.5264 li
145.966 77.1094 li
147.475 77.1094 li
147.475 75.5264 li
cp
f
149.935 73.2168 mo
148.424 73.2168 li
148.424 74.7988 li
149.935 74.7988 li
149.935 73.2168 li
cp
f
150.012 71.021 mo
148.502 71.021 li
148.502 74.7979 li
150.012 74.7979 li
150.012 71.021 li
cp
f
147.538 68.6982 mo
146.03 68.6982 li
146.03 70.2808 li
147.538 70.2808 li
147.538 68.6982 li
cp
f
150.539 58.416 mo
145.438 58.416 li
145.438 56.9639 li
150.539 56.9639 li
150.539 58.416 li
cp
f
150.539 61.0381 mo
145.438 61.0381 li
145.438 59.5859 li
150.539 59.5859 li
150.539 61.0381 li
cp
f
150.539 63.769 mo
145.438 63.769 li
145.438 62.3149 li
150.539 62.3149 li
150.539 63.769 li
cp
f
142.98 74.5615 mo
141.915 74.5615 li
141.915 75.6816 li
142.98 75.6816 li
142.98 74.5615 li
cp
f
141.238 74.5557 mo
140.172 74.5557 li
140.172 75.6758 li
141.238 75.6758 li
141.238 74.5557 li
cp
f
142.975 72.9248 mo
141.909 72.9248 li
141.909 74.0449 li
142.975 74.0449 li
142.975 72.9248 li
cp
f
141.233 72.9229 mo
140.167 72.9229 li
140.167 74.04 li
141.233 74.04 li
141.233 72.9229 li
cp
f
140.159 112.214 mo
133.273 112.214 li
133.273 51.5498 li
140.159 51.5498 li
140.159 112.214 li
cp
1 /1 /CSD get_res sepcs
1 sep
f
151.432 112.214 mo
144.546 112.214 li
144.546 51.5498 li
151.432 51.5498 li
151.432 112.214 li
cp
f
88.873 115.568 mo
96.209 115.568 li
96.209 116.381 li
93.0171 116.381 li
93.0171 125.648 li
92.0649 125.648 li
92.0649 116.381 li
88.873 116.381 li
88.873 115.568 li
cp
1 /3 /CSD get_res sepcs
1 sep
f
97.0908 125.648 mo
97.0908 115.568 li
97.9307 115.568 li
97.9307 119.404 li
98.2666 119.05 98.6147 118.76 98.9736 118.536 cv
99.333 118.313 99.7646 118.2 100.269 118.2 cv
100.717 118.2 101.133 118.277 101.515 118.432 cv
101.898 118.585 102.22 118.854 102.481 119.236 cv
102.658 119.498 102.763 119.766 102.796 120.041 cv
102.829 120.316 102.845 120.604 102.845 120.902 cv
102.845 125.648 li
102.005 125.648 li
102.005 120.916 li
102.005 120.263 101.861 119.773 101.571 119.446 cv
101.282 119.119 100.801 118.956 100.129 118.956 cv
99.8677 118.956 99.6299 118.996 99.415 119.075 cv
99.1997 119.154 99.0068 119.26 98.834 119.391 cv
98.6606 119.521 98.5137 119.669 98.3926 119.837 cv
98.272 120.006 98.1777 120.184 98.1128 120.37 cv
98.0288 120.604 97.978 120.827 97.959 121.042 cv
97.9409 121.257 97.9307 121.49 97.9307 121.742 cv
97.9307 125.648 li
97.0908 125.648 li
cp
f
109.775 121.519 mo
109.775 121.165 109.727 120.831 109.629 120.518 cv
109.529 120.206 109.384 119.934 109.193 119.706 cv
109.002 119.477 108.762 119.295 108.474 119.159 cv
108.184 119.024 107.853 118.956 107.479 118.956 cv
107.105 118.956 106.776 119.026 106.492 119.166 cv
106.208 119.307 105.964 119.493 105.764 119.727 cv
105.563 119.96 105.402 120.23 105.281 120.539 cv
105.159 120.847 105.081 121.173 105.043 121.519 cv
109.775 121.519 li
cp
105.043 122.218 mo
105.043 122.61 105.094 122.981 105.197 123.332 cv
105.299 123.682 105.451 123.984 105.651 124.241 cv
105.853 124.498 106.107 124.703 106.416 124.857 cv
106.724 125.011 107.078 125.088 107.479 125.088 cv
108.029 125.088 108.501 124.943 108.894 124.654 cv
109.285 124.365 109.546 123.955 109.677 123.422 cv
110.615 123.422 li
110.511 123.768 110.377 124.087 110.209 124.381 cv
110.042 124.675 109.833 124.932 109.579 125.151 cv
109.328 125.37 109.028 125.541 108.684 125.663 cv
108.337 125.783 107.937 125.844 107.479 125.844 cv
106.9 125.844 106.4 125.747 105.981 125.55 cv
105.562 125.354 105.215 125.086 104.945 124.745 cv
104.674 124.404 104.474 124.003 104.343 123.541 cv
104.212 123.08 104.147 122.582 104.147 122.05 cv
104.147 121.519 104.225 121.019 104.378 120.552 cv
104.532 120.086 104.751 119.677 105.037 119.327 cv
105.32 118.978 105.668 118.702 106.08 118.501 cv
106.489 118.301 106.957 118.2 107.479 118.2 cv
108.478 118.2 109.261 118.543 109.833 119.229 cv
110.4 119.915 110.679 120.911 110.671 122.218 cv
105.043 122.218 li
cp
f
115.584 125.648 mo
115.584 115.568 li
117.04 115.568 li
120.344 124.458 li
120.372 124.458 li
123.62 115.568 li
125.063 115.568 li
125.063 125.648 li
124.11 125.648 li
124.11 116.66 li
124.082 116.66 li
120.778 125.648 li
119.882 125.648 li
116.564 116.66 li
116.536 116.66 li
116.536 125.648 li
115.584 125.648 li
cp
f
126.938 118.396 mo
127.778 118.396 li
127.778 125.648 li
126.938 125.648 li
126.938 118.396 li
cp
126.896 115.568 mo
127.82 115.568 li
127.82 116.814 li
126.896 116.814 li
126.896 115.568 li
cp
f
134.316 121.84 mo
133.962 121.989 133.603 122.088 133.238 122.134 cv
132.875 122.181 132.51 122.218 132.146 122.246 cv
131.503 122.293 131.001 122.438 130.642 122.681 cv
130.282 122.923 130.103 123.292 130.103 123.786 cv
130.103 124.01 130.146 124.204 130.235 124.367 cv
130.324 124.53 130.44 124.666 130.586 124.773 cv
130.73 124.881 130.898 124.96 131.089 125.011 cv
131.28 125.063 131.475 125.088 131.67 125.088 cv
132.006 125.088 132.333 125.046 132.65 124.962 cv
132.967 124.878 133.25 124.75 133.498 124.577 cv
133.746 124.403 133.943 124.186 134.092 123.919 cv
134.241 123.652 134.316 123.338 134.316 122.975 cv
134.316 121.84 li
cp
132.902 121.42 mo
133.062 121.401 133.25 121.374 133.469 121.336 cv
133.688 121.299 133.868 121.248 134.008 121.183 cv
134.148 121.117 134.234 121.007 134.268 120.854 cv
134.299 120.699 134.316 120.557 134.316 120.426 cv
134.316 119.997 134.178 119.645 133.903 119.369 cv
133.628 119.094 133.165 118.956 132.51 118.956 cv
132.22 118.956 131.956 118.982 131.712 119.033 cv
131.469 119.085 131.257 119.173 131.075 119.299 cv
130.894 119.425 130.745 119.593 130.628 119.803 cv
130.51 120.014 130.434 120.276 130.396 120.594 cv
129.543 120.594 li
129.57 120.165 129.669 119.799 129.837 119.495 cv
130.004 119.192 130.221 118.943 130.487 118.753 cv
130.753 118.562 131.062 118.422 131.412 118.333 cv
131.761 118.244 132.132 118.2 132.524 118.2 cv
132.888 118.2 133.231 118.24 133.553 118.318 cv
133.876 118.398 134.155 118.524 134.394 118.697 cv
134.631 118.87 134.818 119.101 134.954 119.391 cv
135.088 119.68 135.156 120.034 135.156 120.454 cv
135.156 124.402 li
135.156 124.729 135.214 124.937 135.332 125.025 cv
135.448 125.114 135.684 125.093 136.039 124.962 cv
136.039 125.62 li
135.973 125.639 135.878 125.667 135.752 125.704 cv
135.626 125.741 135.502 125.76 135.38 125.76 cv
135.25 125.76 135.125 125.746 135.003 125.718 cv
134.862 125.699 134.751 125.655 134.667 125.585 cv
134.583 125.516 134.515 125.432 134.463 125.333 cv
134.413 125.235 134.377 125.128 134.358 125.011 cv
134.339 124.895 134.331 124.771 134.331 124.641 cv
133.976 125.032 133.569 125.331 133.112 125.536 cv
132.655 125.741 132.16 125.844 131.628 125.844 cv
131.312 125.844 131.005 125.802 130.712 125.718 cv
130.418 125.634 130.158 125.504 129.935 125.326 cv
129.711 125.149 129.533 124.932 129.402 124.675 cv
129.271 124.419 129.207 124.113 129.207 123.758 cv
129.207 122.526 130.05 121.798 131.74 121.574 cv
132.902 121.42 li
cp
f
137.732 125.648 mo
136.893 125.648 li
136.893 118.396 li
137.732 118.396 li
137.732 119.488 li
137.759 119.488 li
137.975 119.068 138.282 118.749 138.685 118.529 cv
139.085 118.31 139.524 118.2 140 118.2 cv
140.336 118.2 140.622 118.237 140.854 118.313 cv
141.086 118.387 141.287 118.487 141.449 118.613 cv
141.612 118.739 141.749 118.886 141.855 119.054 cv
141.961 119.223 142.053 119.404 142.128 119.601 cv
142.372 119.124 142.695 118.772 143.102 118.543 cv
143.506 118.314 143.971 118.2 144.495 118.2 cv
144.988 118.2 145.383 118.282 145.677 118.445 cv
145.971 118.608 146.197 118.823 146.356 119.089 cv
146.515 119.355 146.62 119.661 146.67 120.006 cv
146.723 120.352 146.748 120.706 146.748 121.07 cv
146.748 125.648 li
145.908 125.648 li
145.908 120.636 li
145.908 120.113 145.798 119.703 145.579 119.404 cv
145.359 119.105 144.951 118.956 144.354 118.956 cv
144.045 118.956 143.75 119.024 143.464 119.159 cv
143.18 119.294 142.93 119.502 142.715 119.782 cv
142.624 119.903 142.545 120.045 142.485 120.209 cv
142.423 120.373 142.375 120.543 142.337 120.72 cv
142.3 120.897 142.275 121.075 142.26 121.252 cv
142.248 121.43 142.24 121.593 142.24 121.742 cv
142.24 125.648 li
141.4 125.648 li
141.4 120.636 li
141.4 120.113 141.291 119.703 141.071 119.404 cv
140.852 119.105 140.443 118.956 139.845 118.956 cv
139.539 118.956 139.241 119.024 138.958 119.159 cv
138.671 119.294 138.422 119.502 138.208 119.782 cv
138.114 119.903 138.039 120.045 137.978 120.209 cv
137.917 120.373 137.867 120.543 137.831 120.72 cv
137.793 120.897 137.768 121.075 137.753 121.252 cv
137.739 121.43 137.732 121.593 137.732 121.742 cv
137.732 125.648 li
cp
f
148.442 118.396 mo
149.282 118.396 li
149.282 125.648 li
148.442 125.648 li
148.442 118.396 li
cp
148.4 115.568 mo
149.324 115.568 li
149.324 116.814 li
148.4 116.814 li
148.4 115.568 li
cp
f
154.644 125.648 mo
154.644 115.568 li
161.14 115.568 li
161.14 116.38 li
155.596 116.38 li
155.596 120.021 li
160.636 120.021 li
160.636 120.832 li
155.596 120.832 li
155.596 125.648 li
154.644 125.648 li
cp
f
167.398 122.022 mo
167.398 121.593 167.352 121.191 167.258 120.818 cv
167.165 120.445 167.02 120.12 166.824 119.845 cv
166.627 119.57 166.376 119.353 166.068 119.194 cv
165.76 119.035 165.382 118.956 164.934 118.956 cv
164.495 118.956 164.119 119.044 163.807 119.215 cv
163.494 119.388 163.24 119.616 163.044 119.901 cv
162.848 120.186 162.703 120.513 162.61 120.881 cv
162.517 121.251 162.47 121.63 162.47 122.022 cv
162.47 122.47 162.523 122.883 162.631 123.261 cv
162.738 123.64 162.895 123.964 163.1 124.234 cv
163.306 124.505 163.562 124.715 163.87 124.864 cv
164.178 125.014 164.532 125.088 164.934 125.088 cv
165.373 125.088 165.748 125.002 166.061 124.829 cv
166.374 124.656 166.627 124.426 166.824 124.136 cv
167.02 123.847 167.165 123.521 167.258 123.156 cv
167.352 122.793 167.398 122.414 167.398 122.022 cv
164.934 125.844 mo
164.467 125.836 164.031 125.752 163.625 125.592 cv
163.219 125.434 162.864 125.195 162.561 124.878 cv
162.258 124.561 162.018 124.164 161.84 123.688 cv
161.662 123.212 161.574 122.657 161.574 122.022 cv
161.574 121.49 161.644 120.993 161.784 120.531 cv
161.924 120.069 162.134 119.666 162.414 119.32 cv
162.694 118.975 163.044 118.702 163.464 118.502 cv
163.884 118.301 164.374 118.2 164.934 118.2 cv
165.502 118.2 165.998 118.301 166.418 118.502 cv
166.838 118.702 167.188 118.973 167.468 119.313 cv
167.748 119.654 167.956 120.058 168.091 120.524 cv
168.227 120.991 168.294 121.49 168.294 122.022 cv
168.294 122.601 168.215 123.124 168.056 123.59 cv
167.897 124.057 167.67 124.459 167.377 124.794 cv
167.083 125.13 166.729 125.39 166.313 125.571 cv
165.897 125.753 165.438 125.844 164.934 125.844 cv
f
174.397 118.396 mo
175.237 118.396 li
175.237 125.648 li
174.397 125.648 li
174.397 124.641 li
174.285 124.771 174.159 124.906 174.02 125.046 cv
173.88 125.187 173.719 125.314 173.536 125.432 cv
173.354 125.548 173.143 125.646 172.899 125.726 cv
172.657 125.805 172.377 125.844 172.06 125.844 cv
171.574 125.844 171.169 125.776 170.842 125.642 cv
170.515 125.506 170.252 125.317 170.051 125.074 cv
169.85 124.832 169.705 124.549 169.616 124.228 cv
169.527 123.905 169.483 123.553 169.483 123.17 cv
169.483 118.396 li
170.323 118.396 li
170.323 123.156 li
170.323 123.781 170.468 124.26 170.758 124.591 cv
171.047 124.923 171.522 125.088 172.186 125.088 cv
172.531 125.088 172.841 125.021 173.116 124.885 cv
173.392 124.751 173.623 124.561 173.81 124.318 cv
173.996 124.075 174.141 123.786 174.243 123.45 cv
174.346 123.114 174.397 122.745 174.397 122.344 cv
174.397 118.396 li
cp
f
177.758 125.648 mo
176.918 125.648 li
176.918 118.396 li
177.758 118.396 li
177.758 119.404 li
178.094 119.05 178.441 118.76 178.801 118.536 cv
179.16 118.313 179.592 118.2 180.096 118.2 cv
180.544 118.2 180.959 118.277 181.342 118.432 cv
181.725 118.585 182.047 118.854 182.309 119.236 cv
182.485 119.498 182.591 119.766 182.623 120.041 cv
182.655 120.316 182.672 120.604 182.672 120.902 cv
182.672 125.648 li
181.832 125.648 li
181.832 120.916 li
181.832 120.263 181.688 119.773 181.398 119.446 cv
181.108 119.119 180.628 118.956 179.956 118.956 cv
179.694 118.956 179.457 118.996 179.242 119.075 cv
179.027 119.154 178.834 119.26 178.661 119.391 cv
178.488 119.521 178.342 119.669 178.22 119.837 cv
178.099 120.006 178.005 120.184 177.94 120.37 cv
177.856 120.604 177.805 120.827 177.786 121.042 cv
177.768 121.257 177.758 121.49 177.758 121.742 cv
177.758 125.648 li
cp
f
189.952 121.994 mo
189.952 121.584 189.896 121.194 189.784 120.825 cv
189.672 120.457 189.511 120.135 189.301 119.859 cv
189.091 119.584 188.834 119.364 188.53 119.201 cv
188.228 119.038 187.885 118.956 187.502 118.956 cv
187.063 118.956 186.685 119.043 186.368 119.215 cv
186.051 119.388 185.789 119.624 185.584 119.922 cv
185.378 120.221 185.229 120.568 185.136 120.965 cv
185.042 121.362 185.005 121.789 185.023 122.246 cv
185.023 122.703 185.087 123.107 185.213 123.457 cv
185.339 123.807 185.514 124.104 185.737 124.347 cv
185.962 124.589 186.223 124.773 186.521 124.899 cv
186.82 125.025 187.146 125.088 187.502 125.088 cv
187.894 125.088 188.244 125.009 188.552 124.851 cv
188.859 124.691 189.116 124.474 189.321 124.199 cv
189.527 123.924 189.684 123.598 189.791 123.219 cv
189.897 122.841 189.952 122.432 189.952 121.994 cv
189.952 115.568 mo
190.792 115.568 li
190.792 125.648 li
189.952 125.648 li
189.952 124.374 li
189.924 124.374 li
189.803 124.617 189.646 124.829 189.455 125.011 cv
189.264 125.193 189.054 125.345 188.825 125.466 cv
188.596 125.588 188.36 125.681 188.118 125.746 cv
187.875 125.812 187.637 125.844 187.403 125.844 cv
186.815 125.844 186.316 125.746 185.905 125.55 cv
185.495 125.354 185.157 125.086 184.89 124.745 cv
184.625 124.404 184.431 124.001 184.31 123.534 cv
184.188 123.067 184.128 122.568 184.128 122.036 cv
184.128 121.532 184.193 121.047 184.324 120.58 cv
184.454 120.113 184.652 119.705 184.919 119.355 cv
185.185 119.005 185.521 118.726 185.927 118.515 cv
186.333 118.306 186.811 118.2 187.361 118.2 cv
187.875 118.2 188.367 118.314 188.839 118.543 cv
189.31 118.772 189.681 119.11 189.952 119.558 cv
189.952 115.568 li
cp
f
197.302 121.84 mo
196.948 121.989 196.588 122.088 196.224 122.134 cv
195.859 122.181 195.496 122.218 195.132 122.246 cv
194.489 122.293 193.986 122.438 193.627 122.681 cv
193.268 122.923 193.088 123.292 193.088 123.786 cv
193.088 124.01 193.132 124.204 193.221 124.367 cv
193.31 124.53 193.426 124.666 193.572 124.773 cv
193.716 124.881 193.884 124.96 194.075 125.011 cv
194.266 125.063 194.46 125.088 194.656 125.088 cv
194.992 125.088 195.318 125.046 195.636 124.962 cv
195.953 124.878 196.235 124.75 196.482 124.577 cv
196.73 124.403 196.929 124.186 197.078 123.919 cv
197.227 123.652 197.302 123.338 197.302 122.975 cv
197.302 121.84 li
cp
195.888 121.42 mo
196.047 121.401 196.235 121.374 196.455 121.336 cv
196.674 121.299 196.854 121.248 196.994 121.183 cv
197.134 121.117 197.22 121.007 197.253 120.854 cv
197.285 120.699 197.302 120.557 197.302 120.426 cv
197.302 119.997 197.164 119.645 196.889 119.369 cv
196.614 119.094 196.149 118.956 195.496 118.956 cv
195.206 118.956 194.94 118.982 194.698 119.033 cv
194.455 119.085 194.243 119.173 194.061 119.299 cv
193.879 119.425 193.729 119.593 193.614 119.803 cv
193.496 120.014 193.419 120.276 193.382 120.594 cv
192.529 120.594 li
192.556 120.165 192.655 119.799 192.823 119.495 cv
192.99 119.192 193.207 118.943 193.473 118.753 cv
193.739 118.562 194.047 118.422 194.396 118.333 cv
194.747 118.244 195.118 118.2 195.51 118.2 cv
195.874 118.2 196.217 118.24 196.539 118.318 cv
196.861 118.398 197.141 118.524 197.379 118.697 cv
197.617 118.87 197.804 119.101 197.938 119.391 cv
198.074 119.68 198.142 120.034 198.142 120.454 cv
198.142 124.402 li
198.142 124.729 198.2 124.937 198.316 125.025 cv
198.434 125.114 198.669 125.093 199.023 124.962 cv
199.023 125.62 li
198.958 125.639 198.864 125.667 198.738 125.704 cv
198.611 125.741 198.488 125.76 198.366 125.76 cv
198.235 125.76 198.109 125.746 197.989 125.718 cv
197.848 125.699 197.736 125.655 197.651 125.585 cv
197.567 125.516 197.5 125.432 197.449 125.333 cv
197.397 125.235 197.363 125.128 197.344 125.011 cv
197.325 124.895 197.315 124.771 197.315 124.641 cv
196.961 125.032 196.555 125.331 196.098 125.536 cv
195.641 125.741 195.146 125.844 194.614 125.844 cv
194.297 125.844 193.991 125.802 193.698 125.718 cv
193.404 125.634 193.144 125.504 192.92 125.326 cv
192.697 125.149 192.519 124.932 192.388 124.675 cv
192.257 124.419 192.191 124.113 192.191 123.758 cv
192.191 122.526 193.036 121.798 194.726 121.574 cv
195.888 121.42 li
cp
f
202.538 125.676 mo
202.436 125.694 202.301 125.728 202.133 125.774 cv
201.965 125.82 201.777 125.844 201.572 125.844 cv
201.152 125.844 200.833 125.739 200.613 125.53 cv
200.394 125.319 200.284 124.943 200.284 124.402 cv
200.284 119.097 li
199.263 119.097 li
199.263 118.396 li
200.284 118.396 li
200.284 116.38 li
201.124 116.38 li
201.124 118.396 li
202.482 118.396 li
202.482 119.097 li
201.124 119.097 li
201.124 124.066 li
201.124 124.243 201.129 124.397 201.139 124.528 cv
201.147 124.659 201.176 124.767 201.223 124.851 cv
201.269 124.935 201.342 124.995 201.439 125.032 cv
201.537 125.069 201.675 125.088 201.853 125.088 cv
201.965 125.088 202.078 125.079 202.195 125.061 cv
202.313 125.042 202.427 125.019 202.538 124.99 cv
202.538 125.676 li
cp
f
203.657 118.396 mo
204.497 118.396 li
204.497 125.648 li
203.657 125.648 li
203.657 118.396 li
cp
203.615 115.568 mo
204.539 115.568 li
204.539 116.814 li
203.615 116.814 li
203.615 115.568 li
cp
f
211.638 122.022 mo
211.638 121.593 211.591 121.191 211.497 120.818 cv
211.404 120.445 211.259 120.12 211.063 119.845 cv
210.867 119.57 210.615 119.353 210.308 119.194 cv
209.999 119.035 209.621 118.956 209.173 118.956 cv
208.734 118.956 208.358 119.044 208.046 119.215 cv
207.733 119.388 207.479 119.616 207.283 119.901 cv
207.087 120.186 206.942 120.513 206.85 120.881 cv
206.756 121.251 206.709 121.63 206.709 122.022 cv
206.709 122.47 206.763 122.883 206.87 123.261 cv
206.978 123.64 207.134 123.964 207.339 124.234 cv
207.545 124.505 207.801 124.715 208.109 124.864 cv
208.417 125.014 208.771 125.088 209.173 125.088 cv
209.612 125.088 209.987 125.002 210.3 124.829 cv
210.613 124.656 210.867 124.426 211.063 124.136 cv
211.259 123.847 211.404 123.521 211.497 123.156 cv
211.591 122.793 211.638 122.414 211.638 122.022 cv
209.173 125.844 mo
208.706 125.836 208.271 125.752 207.864 125.592 cv
207.458 125.434 207.104 125.195 206.8 124.878 cv
206.497 124.561 206.257 124.164 206.079 123.688 cv
205.901 123.212 205.813 122.657 205.813 122.022 cv
205.813 121.49 205.883 120.993 206.023 120.531 cv
206.163 120.069 206.373 119.666 206.653 119.32 cv
206.934 118.975 207.283 118.702 207.703 118.502 cv
208.123 118.301 208.613 118.2 209.173 118.2 cv
209.742 118.2 210.237 118.301 210.657 118.502 cv
211.077 118.702 211.428 118.973 211.707 119.313 cv
211.987 119.654 212.195 120.058 212.33 120.524 cv
212.466 120.991 212.533 121.49 212.533 122.022 cv
212.533 122.601 212.454 123.124 212.295 123.59 cv
212.137 124.057 211.91 124.459 211.617 124.794 cv
211.322 125.13 210.968 125.39 210.553 125.571 cv
210.137 125.753 209.678 125.844 209.173 125.844 cv
f
214.563 125.648 mo
213.723 125.648 li
213.723 118.396 li
214.563 118.396 li
214.563 119.404 li
214.898 119.05 215.246 118.76 215.605 118.536 cv
215.965 118.313 216.396 118.2 216.9 118.2 cv
217.349 118.2 217.764 118.277 218.146 118.432 cv
218.529 118.585 218.852 118.854 219.113 119.236 cv
219.29 119.498 219.396 119.766 219.428 120.041 cv
219.46 120.316 219.477 120.604 219.477 120.902 cv
219.477 125.648 li
218.637 125.648 li
218.637 120.916 li
218.637 120.263 218.492 119.773 218.203 119.446 cv
217.913 119.119 217.433 118.956 216.761 118.956 cv
216.499 118.956 216.262 118.996 216.047 119.075 cv
215.832 119.154 215.639 119.26 215.466 119.391 cv
215.293 119.521 215.146 119.669 215.024 119.837 cv
214.903 120.006 214.81 120.184 214.745 120.37 cv
214.661 120.604 214.609 120.827 214.591 121.042 cv
214.572 121.257 214.563 121.49 214.563 121.742 cv
214.563 125.648 li
cp
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/CSD [/0 /1 /2 /3 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 13.0%%AI8_CreatorVersion: 13.0.0%%For: (Administrator) ()%%Title: (MF_PSchallange.eps)%%CreationDate: 2/11/14 10:27 AM%AI9_DataStream%Gb!Q;kuuiaddFXHhh*)>)-c\t_ItV7jq%Rs&n8W_"G;PJem@\>EN]8i>HQIe8X?XUZhJ[LScu(C@s-%%V(S%a>Hc@s&'r#A>CS:A%(&C^IS>'a8Ki2X^iDZM8nU@6UqtefemN/c?[uF.\g1n(MS]*p0D9';l4Z"+c<r8lQ/\5KsAZBperqb!S4*Z1bBs\\7L16iY^ZK^;%SbfP0@Zg[+`B2DTc.BSI;6t`+\D);'f,_N.YPIXN7^l$sl7<_$cqLICSSmc8Rn.PqB^OaLiPB,'1L7[rSY:p^6(tGr4_9ANoTYc(%f=&8?Yo=U3TM`-s78[%\_f8rXa7)Y?<@PNq<OG]!XEpu]kG"1UP@!S1QVo^MlISe$Ti0GuH>-5>9L6)M_+C&=G`)i<hLF"@T,PHc%3o+tmqp9Zg2Br5%\af=?XEPVrj0[9HZY6E3,P]`g7pF2[(?eJ46$!I'SQ7R@7D'/XU[cr'j'R_`rVGp!F19]1(L)@\E%>m=Xkc-c%p`J4<+14rAl*]2XT0>J]Bd^G]=#AZMh)1X#f5Fl/eq"&700hl''GWg`gV4Y46KD2='rtRj3f<Zh0QF;q:STM'#Ql'\1nHq@^@5qT%CeHEbL'C1/.SWSo[A%8QrrdFi+\#@T1f\XS%a\JSCD6W,#[Itq&&00W(Dg%D.k^%S+Y\2BrGWPqZE4i^nUm`HG!c5@np`Ai>&q+,%GkU8oPZ?NMqGELJreVKMo0!]?F8^[JV.pLBVWcB[enNU*2sT3[_*TN6fl$^n>lU]0qGMii3dt8J=2f=PZW`Wj\rP[ZNjlT[\%43K%enSkM>$2VU=VdS[$ahMn[4J@ZPC:"pl4Eeqq!#A'mCK7X\u:=tn.W40<Re$LdBZrpRq`[\C,NZ+eLV*1CGic.eO1?2@kh=F+#0L7%MjEqIXqs_*M-=!pI\IV/,ZcJP@7BsJ3`luC@bhY0U+OrLT6S51n.Rqk3/O63,5fBjnJe<,'?1a5']Yr(eqK`p;lcTcmLNn^?n@s!%TS/r3V-(9q]pQF!Ri!/%Q[9unLju@Wp#.9E&j%LB/`)=)_f+&AqW&+oW/.la++E2UWtYAkT46q2_,&RtqX@GMU;.BB="um.PW42]%9Djp!-KZ\KN`lL%&h[YT@eQ2"R$SXkoIT`0e<'],#HO&UM:J<-=LEC3p#.95$2hg>"AD3fr'VR,Y#(:K/SR^?:5g=">N2m*'o?dp%\\Jo1$^*.'SdMucfa4U8E<Y,OF1EN9D.;q3,tAcbMtZ/Dpa9Z+-rXN[fQ.'4d6ion$2b72?*l&F,ddi@-/fQr^;+WCpAt8eFauiB%dXthk:_*1"1QmhflMqiDY&_6s>g]`gaW_X$>(s0lIu/ZD-Jem?`BV6OcbXPiY>?uK;%idBs(kn%#J\5B`t?XX,KFu?IqriZ:%2Bb%>@/2m_/JkI:tjP5-,FNiDf\i>#J\5B`W%=\3VEqI`P.4Bq':F<qD=s^R'hnli&SSKJQ$>ZD8Y)+eJuK`YW)'I3;sRk_f+##3`Ok`%k\lGq\DhFc?)t(f-l$U$FgNjYTI98/o6R.G6r,kQf"Jf]$%K!T$Y+53Fmlf_^O,r,kh,DaeGn[",=`ArLWdB/9oL[hn[r/1_5gpa%`Cs,]rk^b^hseW?;%@uNB6UI)l?e$4j9TEDrg0B@LA2]P$RP8$kgbr@,GfjG]noU=?:1hHSuL#IU3jXHl(o/%H*CnFRk/Orem;)@%S+fPA6$,'!^L]RWjW1+GWe(0i_uImgp6RLH'E:.KKXTM6bZqdmYSF!#$c#<9;q;Va"eL&u2uMPsA9`R+.)Tu)"hVpl^"2%TFNdA,%p0*9e2%LdN0fSW_=1*m-UR&\.q1dJ6/ln"i!ZH*?ej<I]`X_\Y&/"s6LmnF:aM1)%iF9QM4K-BQ!Ls4M_)q`'b_'?@q^G^logrC"%.hM$4&982?\cp&/-LeT0$5%2F?&<]>DA":PrGrB5-"<_PF95'n^gnZXT,WASJf:@'].W:q9N`"G,i)kaT^V)#rH9&gr%S=Unp-Kj%`T"F)_H?Ag`rVSURUfuTn.qN[Y+)qd\gAOBE%SBAN2L@*XhDIOr!h\;gi&hJ"T/B>i,QOd?h3rXSeu43@b4NP?#jp`idcOhYU*!C%KM`XTBnJFJ\(?oYVg:qL!br?0UUq/O&M";M"mottEX-M.7rj<61IO758(XL(Rb0@*`rc;>4l2.=,D5NV0gTacYl[5K&P+sFSHX_N%MtKR8]AUaCRq"PImjcoP[;p\3pS9&&pSOSbJ__B5`-,0F7JBgKR(osY7gV\qIUmBinBMAd&>G>V(ft*aA;:>CHF&sM./#Ql1%?7]%QLlb>J7oa^@LO!FGpq4ir4Q*f-a.X@mgJ6HP"3u]KkX[+HQf5ojO'-J-$;j?'hSK2#M`P-.kH21PU?,Dq]t9'(aF\\&V`QS*65WX%>^OA1ja-"qB[9quHrKTSJY@Ym(3nr_B/`D2YLN^M/p`)_(?3jN>T;$UbCDNE)AJ\jXJs.;h(aN;Ak]?2nls0JfcnePHnI#@=qAed%DcNse(&]%7(._R]0g&Tj@r+FK5mpJH8X85UoH!rr;SF#!h[Jgd;R]o3-1iC+#0Ur$[CgqBoJK?5mNg88*g5DAkhBmHb8KuoD^V=a%C>lI/9hmr>8>>T+LZPol&*.>Y_f(@^*XuqC2c5t`o\et,;NoQUL&+bXf0&IHgW"`dGABMQG67_JlKhCRiGjf%R2nh-O0=s88!fur%;NQ?GKPV,YL=?knE!N[Z^jSm2%R'&*o$cWK;H@P%&UkehAY#EO7%)!b&_m@Bf/>cqjrRO'-D;WZT:?S4MrfoBOJ>t^o9tmaM3<Ck%Pr1LN@sD@J/(OhK0I$J'L;+]AUM/s1)fVW[@HPti@U0IBU#=#aLARfe\Ya6NRjs8!A(H6`^"/d&[T**MNHgSp;K\OW1V>Z$GjEm8%`QSMbd<HU4^IAd^=VmcpW]+i4Dc'`JYXT@CXi[iCoY^>B!Bi]aql<27EBiDC!a@LGXG\.l%85)-`6-Z8?XC:>>)LsRQ1mR29t)*G%Ttf#DXqj9STu,pDD]^1qLB$E8K=RX[c35e1:RIp/)K41,5L&-:HFW(g[,aDqSAh6)X?2B!Z9E6&QR@'g@Rt9=b&<`>'n.CZ,A6#$%.UJ[7W*LhA:5&@X6dn2Gnn0Fkf2C0d'SnZ]m]\;mK&OHs<h%$3`2nL4TMX"&S0u5*_iB8qf4$QaT@A"E8h_W+Pce\\eV*,3fPF&l%*H)%YJT;V4G*p:eeBV11.;:Zp3\j;1L<=hg>h8"ABYPcgP^UW!+^ANG$UIYJq76f$+#AIlijZ_M*[nVj\(">&a-9O;m0>/%@)9Fm%2:A8N/2`*a+V*aV&ciLbf,0Zd!nX/CPrS2'&i5L@5#:dDbe,6^"VGLD3P1I&FXp'UTJ?Fm/\MC.](k.Z0K8!,VA3(HLLPLD83@RI%WZ`[mUs=Jp_Yl1OK:T<FqRf-m-pbY*_;!uWHI^%V8&@I42$3/O83OdT,T!]7n1KBn7*#\sWDt)P4:19F+@g$m@0Tt:rjELa"[+If%B+8_e.CU(rY6OG?0Fr+^W!V/+__'G>O1N<S5UGADd&WB>5riI,,TQ`;WaW&%(^O7gAhEks9LK1j8R*IBj1c$W#5cZLZ6WraP^QkA%P>Da1AFRMKT%CV<YWNc/^.bcK,WA[skS8?['!MT,`"TOj)jPD-d-"r1Ff#dt?!XKDc;\SN4mQm1XMq[mD;<T"IJkMRGP:?%CXNT-%#23I8+#q`Rf,`E30pA1LA&GP%1f'aF_<2u^&TA&hXs)VY0N%-(;U6)DMU3)jE`$o&Pu^[o"d7/6?dq6n^ens9r0$*%(92)gL)jL3%oL-iI"^WZe"acQ;+mhOZ$D3>`MsMh\JAHFO]Erfup)13;'("2*kqX#/SWJT-)B/a$_KR)VNGl@s@K3:q\qa>H8t.5ZMk$WQ(,pc9%n2H&/B8DuA7`b:bhZ&Zh,%hYWK&@f>RBWX.>iZ;="N$a,+4ko?&_TdGdO(,-%H)tH2*C2XAXID,"<'GJS6(8SgB_Ihn.WnIYlhF;%oCV!lDa9'2(/pXJM_0lr"3)[p,lCp=:R9d1Ytq4@k<$UBLqfsl-\S7:A-BhJ]@C`r'(>b5q9;L+qt_K<3r&OITLH71Se5@-38ca@%ohk=G?>[)SY:hu`5?ij+[Cb!aUNfc,hA=e5NT[q!9[P@(O%%HJ9(sD+C5B09rS_<7ZbOh'7*YWZ*o?g4gif[%<tP:Po(p^Mo^D#)%(,7'$id1L0F'nk#C,Ptc7:5l>oSU0np&@+n38t.gLX-%M]d%e;iZkS5]Dm#K;!mlekiI;8n'u`jq=(FjJ%:'=9c>/5]g%[)2o&h/%B"d"+g@M*;SHCJDH+I]I+$*0u2MOhalL"#WD6n6Q:T)rllJL>cj(GFk'ET5?DEe*NBXV56POqN5cZd@7HM]"hCM_JGLZ^an&>nUj%N3/uoKO>QkmcuM8So4;:`\gP4TQ.=;>]1Fhh!YmBL[^Z*=d14h1;?cZRM]P%odq_*o0cZm5r`6GT4XisW9c^Wrq4JG`Po^d,se^5%g?a9X.96rD:Q=@]TlT_noKo5FW[Pj(K&T5i4jm]0$8SW"[if2XPiDL'o^J"Bpe=3W.N6;)ioN+qGXnUnT*gCp423:F_ueg4MA7%q%Ie*\V7D\WmY48IIC_2m',`ZaLBjm3m;Q%kT9R1_aa;6!l7=Q,"_FD(]Ni:?=CG1j8)s7JPNAgK^9=]&&f[=GC0A_p3+0GF5Pn4o<%DtXHm@:\WU3Nhie"B?3,8l.a`q*/1?FVH?"l.hc/N,9<``H=U5'+X'ei>+CLDuZ$rXBWZdVae@&S:7Hph9?KKPcg9\AXtehEVcZk%Gn`]I/F'mT]!5F]ia&;"er#_5)L2,Hje45_9X!NceSL/,pI+j>`O4<8X8&Yh>d"%p5E/d+['\g#EL:pSoC2D+A0gm3_;1dhZ-&P:%]mWtp74<%iSq(AAV[-"nIVtVc02rJSrHGM@:hr4@F!aTSqi!@GoAg\d,#+uc0&G*7HegTc7sSf-3fQ$PYL['?p'^Soe$H>NK@XhI%q=*/f&uE#X)`]Em)h33=:c[Fj4)!G-&pKZ"r:a.]R9hOC&+,.Af<-*eZIWpF4ad#`G;4^K6a^h#+.@E@L5-0MgZ2T:kl125D:8(;%F6ED'HFrd?=SrKu:5Wh_l<j5HX/q6M:.i34&e@1kH55WCf0e`3p"[UhQtG[XZ#Q*81:$%u&G*$i\p<3J&N.V_#W]u;3oEI!?XL>:%Lphe(8>qr<aL2#&qG";Y#P%]ZlMi1t?i2E5WMAa.(o+@K>L)p;cZ6=@+!*%XlB'4d@#2blU>s"Z/ncm;78s$^JP&!gs7K_MNW6n,%ctP]!rbpu=aI;_eM6pjnlf#!nT4`5YMZ6iIMfcg"$bC7=r4:4l.K#Y7fd/*G(A(Co[J]W'^PopKEKL4m143:]D&G:7/rBS@`m:eY%gs!+)hDYB;@\3DM8aEd4gYbKfs1"RHC%S$h_Gd46^E^.!fQjtocK!`Ok;:>6?(oD\It_'jmtqXH(,E@W2`P(%6Qu`%l-h533;\]\%^$c/75>O")O3[+knX8agen_bi9DF]J<ECB8+22o*W'Y\%>0*JgD:bCA06Mm3m6B+h_d0P-4/XXYeBLt];c0B6^?2QoX5/jVB531`%Ut=-`h=ds38@NGMWqW'c?W2r#`0'\7I;\u=/T0E.FR(jrc%k^OriShjRTf>HP'iX"goE[>HEI3^'TZENEpKSUpD\;eY>:kjJSY8W%q;IXd:SMAtD`-E<``).<_^7EQ_elH&f=2K!0$Mt+Q%N*rniDYBRn"jA+Ek;Dp0DQNG[4Q#k3<=A8Lpt2pjJZcI=2!+_P:'35$e!?%\gc+"J>V=**O#0'^a2tZeVML2?ENhon8d!Z5<mG(%bbgI&j$QH0'pGd*5Ji!a4:][H&>^%0?H[kO9e?R,9;_\n[TBZ</V:5m)X$d%*[Dk+E$p;q4@BCJoP@\Gro0s@0E)[Z(Y`P<k(:9G^'HsnHGiT!Ap0pB<kEhT!9D*bSD\iNL(n'*U<t#iLI4rr@X<qkl43rIXZ9f4%.]3BB[r*CULLDL/jT_$L4t*d+X8_%'"8TY.H?q,dE9*3X/R4(l?/r(`S_J>R-(QrD5'P1obpVLtl.r"-kOk_4Ocu@n;Q&:qdVWU?%V,P*R!"^od4?%_OkklrHh&YKKcX$5mB@LXq+P_:PBBNas3qmc+22qUf&o6H6jLNZpUKY1Yh_4*d\P5sB*"Jf@S1:mPDHhN=F>B0-%(%,B5&Tk;?JbkY]J,?BCi-9[aog[$jNbd7=TB/(>Z5DP(_X!R!]A'6(J>L_mjca`TXDpTYK4NJ;nS7p]m-s4RVYHLD4X97SV;;"D%+A#4!*f?>7j$>/cOTYN_^.DclR+<LPY,D:p[opEY4gLH;U95"\dEJX5lqs?406_qOo/ZQ@?LDiX0"0#CTfS#Eo[5?Vi9OC],^sq.%ea,o2A\(?Sc$&%/YY?^]XtWmd7X\eX;>4G"T0GDsDSKr\Z"f+6c!@+9nE[V+YqZkAo%)ZB`bOCg+V`5'=7=p,FJ%h949nkTST_1o%e4Ub*2Y\q>86m4]B1s$tI8,Su^Y91In$[XGDRCX9qZ$s<IhE.&DmfVc6][I8XL)R4Ke;Z3F\p,R$I=B&;_]ia6aY\!>%,2$2";=/%+7>"FrtIEG,kfsF"Gc[_p7-lP_+ZVg2`-Xb:nnY-WO\AscmW+?!$NPD7`*(\%t9d"-h#UU%a3@4d>hD$gNp1Lqs%DSYAC<+gqGU`%s2g?u>j(gkP6Fjadj;n33[jiT<2a_oU"Rr@'cYIY]Xd>53C:#`rM;`3]m>1iT.+26pS$p!Z`KRO1k;So;UF?sGac8rfU!+Zo(B!5%%`P+6;i'CK\>cr!)'B3lCZ=k-WKj6a0=Z&PD+@.$?gY)eZ;R_fe_?.UkcAi)p1KqkDJ7T]C<&_[M?WS!rn2VC&gsdT5=%b]ZF?3C%qF3EDYj4nZ:""1=EKS:r@8b?WH%[F7HQa??4jJiDH6O3,O1H@*lpMLUB]Yi!h<AHh.B("uR<JK":R4BY.^lq_aj-82=Zti+H/EDr%"sKqmkX"hdU'b<fbBJXIb/5O0Rb(<74$/J5d/XD<YB.nL%sr3Ub=tF)bjEa%Xk\,Cr1t8QNYcj<`NfFZ^NcrcI.".Ur,fCh\)2U;%Wc.f7/scIFg>(+(l[EY>hd.4*W(_UhPfDjO+$Y_/*.2nLk3jDUeW6?aZ+8K*PHjr^o8U!YARA@c9,H&>]K'#`3Arp%B:gN[nS#!D%r`Ib'*Sn!7>#/Ki/GuHSln_qX$f3Aff8XO=e8?omh5nl9*.2#IFZ[dlp4otpXnC6>ZIutgWbd'b?$re,XY&A/ZYT9@2i9e=4BGgU%rC#]5=_Z%o$S(IhmK>hWVp\nLh1"8W9S:RX-l(c1/0gNba/O3rB]!$TPKM^Was.u4h6t'ISIa5Zo/a@n2)`PakC)$./6=mXQJqae%s-k(=Rah1C,<G$gqqM,#EUoc,p31RtkBf4/d-hVQH\G@6fO.PA@<\c:4QqR*l#oQK[?ChY;Ql%!D/hHNZqq*am7bdn0;K"khG;b$%/iJmu2(m1>RPMLI39YVSc75&*lq]DB8S_=@T?fDn#.<<QN_\0VdK]ZDCq]^l)@T5R#n=MSYWB15;a*t[nC@!=jUHMm2&-4srk@."%j$<tfD`4A;H9mqr:&B0c@:sn1[<u[>m8rIa:nuQn9&Dk_;?o(KLZ@2uciB9KYk@_aajQN?6#3s\o9?(!%bb(_VPam79b;)G?F5mI%qI+c_1M'@jP6Pm=r_Q6DdjpdBOp4p$mcJOD.#ekqeVTJCmJ"_T)Ah:qg:-HFM(9UMFl&H+.pl&7"tc((XngS$PdO]`VAd3M%oZLi%<bZbaN[?IDC_(cOCU5PblI\90C;1HTn[7f<lPJEN(CS]s6*6?aa"LoKc)\lgA>NX7Q+b@81MP3&WAD9eVdhs*419Cdpn7Mjm>'1W%=!+WHCFOmBc6t&uN=HI+*/aiBGN!<2Xteg.*;&<<jaHEe#?TY%f96CBk;P#ob*T)K-P=/SHgb9:Ibid>M1^91;d65RSo.Q:RQP8W%Pd&_Eji`RrRPO*Lba7d25LpGP4^5Ib9cB7@15<KV?L+2Z!;O]5^)_Zo8KRN^nCR.#N=W@PK7<-PO*ORCQeo,6*R.<MV[Zg.Y)iU1%807DBFf'Steu?XnV,;Kic//n0$@n]7Z*OOD:CLDKmqtRNAu5HPG%k@2\K7J*I.r*Pqs2]g;<?Wp;EMVD+1%Rd]KmXqfpJS'<;$hr%*`SV4T&,J;>&JP5I=-f9(P4qe'TYQHQ,g&a=Z%+>[F<##Y?J(GFCfc>4pKlK[G'T()"_$VnRD^71T,<_\!K;,-o>b:QPH*l$hiH<%D]6"V)BZ?bYVP5J\p.J?Y&sP_]eoP9#LumNp\&i.N$?jLm]p?Z>TR<MV$Fd@mc=.gpNVGteU"`HHgTtkFKVEh8:J2=&5U#"h7NNN%q#7Zbp-IBBRd6i`SQ]([SYLC#DeTGko4+WiM%.*li\9+Gc^%k+;";7)D8s'R?_f)CHMcL+&&2tNZ+'`#Dg/gR]):)RDS7hd[X*2,%H(=H6qgNbPj1A(WgKioFTsQa;B>17U\#p6BQX?XghX:A*>-u$q,eeC2^8b(oC@_`CgJ]Hs]j0cLCJCDO0/o4rhL:jk;Z1RC)LLd;%Ci=aqCngm4T$hq3rjlim^.Njd^K16F1o&AB^HM?[')?b7H?1_#rV>n0]i3<VhELmP/Nbq]jL5r_NiZ%L"jo4/@c(cNII-B=IJr>e%jG+%[lf[!Mpq0m*K3713T[k,JCa?LhWI2=MqRn\VppP9fI.q2ulsM.(D7dK'I9\2bX2i]<G[KleYH@75*j7feD%@:pY?aA8`kG/a%,ee^*YrFmNqCqVqhtB<ohCm-tY+EnhK@\4!1ETqNMsl@fe?Z\LnXI(UZMig^lC2C/P%b]?/B2:GhlC8Y)kYEqk.c9k]CPgdo@W]s%bU`ZRK)Jgm>M-V9?0M46(<r/3>)tM0P>rYW(qHs@4AV)"HN)(,%U2Lh5PW.1X#qrhb`IQ<^.IH^--A1$j4`#2d=Q#t9XMY\Gkmm?%pAaYS(csYiT,tmj5<Q#%F-SrQGjYAplC^adh)\4Ie9XVcd^/rP3Z'b1kf*:T6+=kXoKfspg)'a]3jaglYg2sS5M#.c*-A5!"n9"j%TZ5)A(qdniT0e1e9hrD1#,P2R2bss9@:K9A[_3psC0Y#>%m"%oV*q7;3\9"q.>*d@8[cN2g7\,g6(s9V.>t0@AW7sX;!9.%C#GNm%"r5i\FKIWgZ!CAm8_;nZq(HY2%USUEeN801Ls^ZDc1/]JYoNGjYLei3&@]HDI;\l@j%>8PWV-2]gj6#B+L%L;W^?a?@DGFTq@p\e%pk`Ck5O\PQ;*s[ip(,!B2!.#Vl02lEf]1ImeXLd]dlL3FZ*jKbIJ5bi259']/,,$_&q7Lb#FLL]\NFd@c0'+7SR)8$6R?#[&[8t1%jip]e#B@aKhtA$mTuolhIq0:4\\@NaVQ>/%9-sQ<A;D'@hTQK.'l;)Ghrrf<!/BFGFa?H:PE9%QZTK;X9DYGFYt;p3<-`_t36sel%4GCP)HO3N&.[)GB]=.If+6`X_;qNEm=Po"I]9fn=67KQ6r_Yo;8D:mfs7DR0TD/6Mhu(3D0<g4^A%aCgftO*'#$1a%gH'VW[1!2>%N6]/5,C?,K"5O&e.6ja0SEIkm!3^d+Ke]X)egI?'#D.=Aga`CP%h8?(:,^l8=hop"Sr<F-3:#81WkO,kn5g]C4bZekh>"^`DLUnf%q-E4+!8Q;!oTZXLWnb6Jlt4OuH2B^Q>_\fP4g<[o"hgDD[aV3r-?X&!`;AB(JX.(:@KP%\n+qZ_;UA7o7$L1>qD;;S(rmi$R[N5:%-*u!Wq3S%Ikd-or%^UGg;3#T4T*urhXu)0]P>PUK]M6RR=+;&<^-DF1JGH`8rA@;A+8\Sb+2[*LN6\Hbb8d'!G=>IIn\Hj8BWX8M%e]7F`jIj,$Wae`*fDJ5iHTAi$07J.mV*69%`Jm'Q[%5R.U)St3*Z&?7FolR2a7n+`go0#;k*BKJ@SC,+P;4r]O1,&<rKt7=q=WtT%/M+U^OgCkF8*;2,-.MduS]P[=ZCWZ3@n0J*'Z&9pB8kd.h,]c@L;Zu`1uS?s3j40O:W]t>PJ8!Y"r>ckkrU284@<-Ro?!]Sd<PES%d\aD:d=0pm9NC=>-@>\PQ)X@FG-IT2Q[f%h^8TI+-4eSYh,JeYHX;D(hTkuN*EhukS;D<"BfJ?P+p4rb";$K3g*%UTj_+``bk#Xr%Lo.;H?S"SSf56Vlk2=s50N[u>@m8`15+EjncmJ@h?e_RFFeR<[?mk7IgMol6#cdg1XaPP%h]9L/(8n^V45!mg"gIMJn\Lo_hs;T?%Ge.GsFLI4$o"#E2f!=';QpM_)jOg=\'/)6UTd_9_V&pMp1Qf1bq'ML$,C;E_Bd8fg23TG_f$COZ_/+.3V!5M$,;CH.(AX'i;qSK@%^!Rj:J/"p$N]?"R)M!73&."\4j/Gs,PQmT+)]=0e@j.$4]e^i:5jOmZeD<u,hoasKIQ#7T3J"ol%<R;/reuX[+85AAh`CMsBTS)W%nfm.4&Fq.%f9p67s5$V%WoFmUn?^Jk#<05>8NbPinZ3u9b8^Rc04C1:A#UClE:>UTj(f.*]>&RSA":?`4="(D"O`J]Z=fB$^\;tD%oSH!r$MkXZ3F&j3"8uM7o&+Bul=)fXHNTd&=U9HB&^,*3D`iGI)P+pT67Kl$O`s)5?ZZ#+$@TR/qLnada:"A7Yja'mm6Q+BC&T$&%:7ApEMTI$U)=]OO<G@+5.oB;m2m,bCJR9he:o:oh=?M',7bC:\9["m_9WF^3*.cqhDH%&0;-RiZ6+D/%!d`OZbJ6'pq;Uo]^D5ps%DtQTc/#O[Va+=ZOR(aLQH>d6m0=s&59]!Gl0\Oag6Ed=\d:E>!HS@J@l`ri!Mi,*6l+(L*#-I1g,b+5-W@j(M`.Wn0T7HN]+h$O)%;pi8W.We_56SAM]ZMgoh9Gs-D=.,,O^(-"#]PAB/06G4c^RqGJ3P]H_1NDhqBF<g,Y2VYB&5O@CT)n%[aPK_V/:'WBO:[DA&$eSe%H&eAY-l^\C".pgY"O<JW0:6P/ThkM&?^_UIr])>S6gA<XP[pE`*,RTbUR_n?dF(-&6lRB/BV!3=Bm"k65,#=T6Q[a-F.OMJ1MqA2%WCeMSanW*IJ""='hE^t9K6+CFhZ`a14@_IRc.OWAF.IW![]20qV\M[n6E4\a0X>-UPuJ,PEcd\MU\MEs2jGgIJ<snY6!\a<+*,;)%SUX3gV"5\Mdrm&m=l0<G(n7AI#%=f2ql+E*iaqWCLH%$gSGH_08jb*W#W\9qa'ni<'3F6!RLQAfp+pdr"S\(X$20t'p['?!E`,p.%`7"kWCd>12Q7SR#Hl#XoGW(M0+$n>U5:d1tZhRp:oatRq+6tQhWO"_LA#_)==;KE>cp!dGm8.;%GU[eo\4\>LMOb3Oha`"_ADp?_%lmt`C:[4cQlJ#)eBp^I[-&8I\mq]g3_jDuC8GIQT$b]D`@UIt+NeGrT-cs4j<ec7)JhW-_?%D)14k1O3J<HlegLC7oToV[26dq;_%R6&M[O?#.'lH8JV<QO7/;2@B%o'W=3QDkYIGtpEH3^"ceJ:FZlGa?5.qhNY>Vj'lN!g@\e=%k<5'?&<fW`Vmd-`7<KRne^#Q4g`o%DXUrNA*MH-R=i#j&mmkQbdNN%L:gNcX$:UO'&&\':2eK^2`DBDKifCGEn\W#F=2X]Omq,Lc;IW#C:TK>HqP<-#ZVB_.QJi@jVH,a%/mffL5+k/L&4,7]j+Y7m1Atq(*h0qEI=f\Q]s.`RiArE?Y#$$2%UF5^>u/Je)ft5K1['Mb3d_ECFp;5Q[br8gFP.ORd;6Y.kKmdQ%ckT0Jae?o'TSm@h^,^s$4+j\4)GL]IFp8sWGDmZ"0"W0;5E-e@/j"\<m"HB*LFtZ@cI9i1kKlX"P1)52?BV\_bS^-I9VBp#"&15h%dsEq)mMECHF>KI4?RhlE%2i;q1ta6#1r#rTi,geH/:%(0hpGDLUtJ"PlHQX!NAR-LR1)!?_hf!hj3-Y&Id$I0#2;@`0)tdjrTGOd%csqhkrMPmOq:N^sQ8,5mPW<tY#>CT0a(m<i6Y%3om27I+C4K+l62PB4+Q#+JF#GCT7h_)C#$Y9.lL%0uoM'Le7R@UI(mOT&=HB^\%G"Y$-M-EQ"PMP(0$52Hd"IP-hh6:VIf*jrHIPuh?qZD!W%Da6XF_`UU@T/3<j9_683I+YRr&d'Z+_:3\,2Y*@g!Eo;P3G4\VHt<N%hA"!/[XBal/3BYg`Ed-T*J\^LDN_W6U]dF$SQJ$9l&#@1=^W5MOI?Dtg!*PF#0GoKrcCHo34lf)e-P)RbZ3T.8l&/cm]Lq2R8Sbh%S`G@"8YsJCqcfD&s4iH[1%5;+nNCN7CZ+"KH$k$]@a^A^P/HU.G4Ia6bR.*/dPFf+kq";aL4n2Z+0/rqLnu2I%(o,lUV.CO;9,lr%mKn"#/pCe$fGb9U?e]uB(d1bmoil%hbJh"\=pG)G8^2Y\XGS*JW4TYsOi)u(j>$@S>e:ln?HP2N[.T@Ia^MbG)HNT_'"2,!SPF`-%3*#C+44JU4P&BleVmuDtrVk_G5@TSFI4?p;hc8kFN\&Fd48Y3hrmsp9l&j]/c:p=!8+-#mMA7!rRCPL:e)tuf[mc@W,W2FB"M"Z<%PF`AOZib6pa(S)A]P\*a+%q;dG<.CfAuF<V(&CTR0:_%"3)LBO)0WPeTO2;9lBGcRa@Kq_a<Qm'-%.HrQBbmFcQgml3^#u2>fN#f%hsOTD5B^KW)1BAMl!r3(n]7f1]Ape!WI<"LOn$cmqNq^f+,BC-7.2$jGGg1&>(T6kM!i?VL,QP3-6ZU?rU\S?iUC1HA>Hpk5Aq*o%9T#GaJE[kaT//K_?t8<8jEsf;X04[Ck)78irStoh.*F9UUW?#33E<C1#4`TL_@*h7)Q+&u/Lb]u.Zs=uTe4Lt*[DPc0/'rJ65TKq%O2XF%d]s&RjjaeUbEs-?\skWb00??iOE$\V_YjR)34U[?,?8/Gc53KN,JT_*Krn;,FEU'<&9NW?htJ*Z5+IFal/NO$3ZmcAh]Ee"%+"fP\HIVb06Uds9cA1^!TfSoq39J=M;dd@f\AU%PVT&kT2'4Fl%4.)87[jpTnD-r`2WB+o*+'!h5sAOe?c!t7,L2';Yf0M#Fl5i:%lN(9B?`]QQ5e1AKA"OT5f.HU47.s#?]T)V\LJP)Y'?V1!fsdTTaPbi$]]^_T4:a1d?Q\<WL<Zt>^%C%'aYE;`3SJ2E6S';Im*U8/%)($?b+b_L0&LTnurp;qlR9h,[LcXl<L0*SMB4'(9-\[VXP2YQR`>d5sA(ioYHN[l(nM692!HUJ.A=1\hjaMq,_f.7sKL:4S7eDmn%St>j;Xjf%?F;Fhn9Y[d)KtHXG=sI'-(\;(/XKO+EAPe.;;U7gpOa?\5KGgc=g#t1hYPsJ',?5aC8!/p;+5`^:mNl40.ePS3h[JV)%jnbuJhq99D:P38Tk5Pj3fHa4PlXL"<ph8rc5t:XDcJnJD%iHuppXt@MIP!2f/sVKW1_gMs=Pnq+kT\oG$CA1SUJ6F]b&<\0'lG_;%nu\m1Z#:1Z\,S%ZE/@nTOf-'mq8[O0B-]_5Y_(O%P;<iDU&bmZI1\ZGO'R_2K5*q:PO@JtD\(uL+JZ:,LWG7t@;\-RNslPB\.HnS%YEg]LNc6a?(Qdb1j.d!COs@Lt2Plo\&b:r/L^26.F=_<h913ElqXF`Wp<UpSp;Y_<Q]orlGC=D9rI*pVl1;oi=t!D&.j*(qhDIKg%CokjOHsURdR'Z"[XWsi+<NVg!eaBfDjm`eR'=,5/jA5c<OR..p'$eH__@E1`b%.u*?S7AUm]/kcf^`MEnff[=m6!8l$oddW)&[UF%X`hj[eiR-:r@KVSX\X]-Mk3*\Y168f'UNS79$>2BM.YDZP22-l/Mq,t"cTXRp'6R)]A\@cAm0q[0p@`.2dWPO;[6<;]-!&2#/u"<%-0&Cn7p<4QF]Pg&KU"abf($AU_4WscnWaS+p?QFFI`_ZZ_=!Z>6&CY>DP#FR]/h*!=<RY7DR4\\?)ltcVcT-c4[CakR`^]E`O-[K%c7QK9Rt9e!2.%2?75V63V@j#H2(Rh'Docd#K-daj1XS"QN>qsoq,2R*@UIY&k0gI":Pnha>bt5rg*`IK43kaQ?:T1&>gbcUM;M8M%l6a%B]l6+V4aV6.A?/O)qKtdq)V:=$M-Q[_^(FWpQb'nqHf&k`lLpcHhn')5"$K.&A`R'1DneLh5J=H#I4mf6gbmsmFT">8K4iZH%eIOH<2I2Id&:!/'PtdU09:,R)Qsm;bP'hifoJ0r8>uE<2&=JR]*+Pm9g:oY;/d@VdDY8gkl&rXCqh:,_Zg!X3qKrp$ODMM(F./2l%*)SV";D)8AA7PhrF@gqIk]buTO\M2'CCdMu;.\3fI-56tflTfrFOAag;.S-%$#SPtO_3&g9e$'Qj5I?/P4l(U)G!$9O\M1LIu2QL%6Y4a>G1H=^iAY;rV<aGBbbc<b@W0Phlg5&:;B'a:h-2$\=>jHJKiJt82I02cS6J/)Cq?DP$7!lo90+ZhM1Ha0Rk?.V/oJ?4T1tZ:%4r-:!)+?Gh;D)6[^'pW.QNW8gD-8+*VTY+D21fYUUg1KiqtPn)!*?$Vg2$c/mMGcN8&`Q;+>t!fHc"SYq%B<?Esn[IN;C9"Ua]ki%(N6mg/lTC'#H,9pgI@:SLJg61Hma\YOUhUR\j:p7C=[IsUjAr'M\Y<a?#Cd48t(p!mb#XD:S/Fu8V%RY*$tb_NP*a[alJ=_6j[MP%:EQ>U+X,&j__W*l@d+]b%?Ro^I*Gsh4'25Wo"hN?9BRuNF.<d(^#gplP:Kua?*8*tB?)BH(YoP2TT?8ZZ!ii#Ea3[Pa.rELnEYO$%4c1*nh;uaYWb,OX-Ze/LM$$NG$L'(=F75:C4OA;T??Si)B<eaeS1FECIu"^hD/jmc>b7;<>d5-!T76-?E["e]lO*LKkH5WI5Cu;7%^9PG,>T&:\5ob0VdJt,",XGtQWNNuq-KhpJMg8iO51.bVWh<#a2H8CU&(9"NDn&Ue*Y!6I\nJ%+;+<pDjG\iY'A.^)PaD1AA3S9I%I2'Q3Uj`fd:`?F-[u%bRQ,NV097bkkN-D12$MTVJim.BJen3^Q*`&m15>`DpS@cn>CakqTX+9E8g)W`%9@s!eR?f?Y4=%O:62A,I%)ZsZ3qd)(C#\\!0nH`kZMdOo^`tD1-TfsJfFjIQHDe(dD6<9*tA+N>D23D;Yg@%/d\nJ$lk2Z?l@F^3LmoPD(FBZrf%$o5-EfX5H%-]6fmWq\`6"(&nZ,EV7[L&k(pTmP&X,Vi'll'n*(P735Xi@`3T9YTQT9k;mt_qj)9XWHPX]*rPHn$j<*k2XJ:Li1B$6U&&!ar<oY%;VE.8"0X3Ee)!658U2qW*;G9#552b9p\M,jhf+qVX6'[c)+e;((Trm<^#i+lXcHi`ab;>-:TU[Zh^#cAEYtL4bf:;@emA;Hb&/<n%4'//K6+pDmhh[qS7Z^`1?=]^-[Op(FTChThKgTWBhh4Zt@lbPW^HI.B?_XHm5@tZDaRFRj^K0RT\+C3S7+?`,8PIb'R&q*g@XZ^m%H8<A.RI-\r8N#;LLCV<2;<<'U2g(];VX&ELG(7,0M+#\&8PK,S_S(nd+SmCT0b:&sMN$&*hDD*7MIEp*&5rul9"!GEQK2!R02`NP%Nk6,ba*%@Y54qPXM;PBN?YE6[#jYt9jZTj\&<#GnpdPKD\k7'>^.!hAM;RND\<)!Fi:,>]hK2l\jiVo;cd=@#^G$DGHHsZQ%B*@-%e?0UN`fk+KNG?)=U6\3)hWGXNU/9S=>.aRBnTD1O]!cI(r`EGZhc?fDQ!K&_T"IV1;eee"kBWD'pTU4&1bY'`i<gkVVd3n>FEbBB%'Lnoi52=rjgV^BD4S+$1oO4g9k/l#(Xn:D`c?S`ZOufO>qn.BJ1h`R.mU6K9M8]_uO`eq)Jf>UbRO-PQ/C&B)^5MbTGK0IWhYWPm%^[^R<e?nr8%lH'JO!)FBrp]n9FQZm[%52n:??E$1=dab8>/UXbci%X-rgZ%5jBgmG/oAs)d\-0f2s9,o4;GZSk/$.[b+R%'jRU1_%TZ90.80YfYde"m%IsFVQM`n\E>jm)U4YPAiNd\=%X%-[^8C[7LjIVX0F@sEP]f(6*I`h9rY9liQXK]f,nTDCp/S:3K]^]K7ZMAMc%HENq&n;sHD,lPhH-'84j0r]^j@F>dX^rJnY>'7B<)H[aI_<154*DOL?cuNr.d`j>0)hWiFAL)fF^HD>cXL*EgRU-tM/pqEQORoTZ%4WB$,D"a>r'K$Qf,ra3B7qo4m3@bguh+p-U]k#&qXburH`l:L$<OpY$G^V:g\h>j"P:I`eqS&BlpbK_lbMS9ua]IL\Z25cg7f'hZ%Jl<^og=>]lZ1"/,phh>DH.%iJJD[b`ULuS.41[G0O3f'U0Q4[-?`O@$V+57]nW1Y@7W,S64DVAh^6cOq]H$''HQAB2SAQA;dhuC`%NL:HX$$i\WMZ@NWrF8o#/j"eif!R:2AV`kW_,gT>0#[FF<(m.,.ml9+Q:U.[qqmg)4-AlVr&Y/"mLGasePCIKG[oj"HLkL@Q5Za[%3QRnRLSrW8V_gdk@$KOrVK0\jF-W=(37RprngpZ(^+>3O)8;>FEdt%5.QQW+c*#=TXRG8cK0ZO,rBC#nWJqO"qC!M!Uit=Q0&3KJ%#5%JP/ASnYJFSH`2^F4@0KnN!2:B)"Rs(;P#8"NIp+4#Srh\]VL*BUSO9M#B_pNNXp;SZ!(ojB8R([LDBfe/qNHtY8Dp8?BCe7)+%?r)e_.QE0n;(lH)^EEt=I7d@D8aO)fbbo)R1$r]59DJe'OmUD[njRK?qKH5fQfM-`rM=o?De'g+V0p-LSf/'.;D7.lPJk:T^jEtq%Hq@YSd9k%_GsCl@0'19'J)q6.njU1uR+.^IPqo>Vdp/lg.C]/5inI;>f5Dq&>U0,(e8Y0Y7@+ccCjJIUD;r6Xfj:A**32$SlPII]%fWBU@rAIXQ?GC<[:oYg*i4XRg4655_QhG9p61=KiKul^>l^&V0'(T9:Fg#/49Weu_lR+HudbMCIHl;K]^[.fihI$)eHi:6gom>-s%+:7f=AM5Gl6?VdEr=ZRgqlAjt\CWAqi[j1qcr'#f9g;6E4pl"P6f%'p/a2toB*@u*A`)c3i"r=in+Fj^F]5$-#JSeC.;C?BeSj[K%pdUA:T)W-3ls=r27rYY=p45gaU3ihcrN[)L'/EJCFK]'BJVq+j06TFpS+$%9%>,&Gl6kVVhOL1sh<UEPbR-)Xp""Kg'$k9>'gc"o%_r'dH*H3%D8:CBKIZaQ1Sm2/>^2rteHi:5N-uWW8p0PL-=uum7O5aK\m*jnomc,8G.j!+8pkI+A8A<Vmn8+-GHi:72Lsr,9#J8S@%>E]j`n&+&KQ[PplBX6(_`FflWUUeu0qn+p17I\lTrN^A7)ra&q!J3/6mc,8_@ljUkINuCaYHKOKj6I/fp\G>>'jlp;%!Sm^:U3FM%<^/fYBZPQ!I.U%DeaG(mBnNHHWAlfo]ma+!cIF#BpIB8-h^J&%qqp_+0CO&9Hi<kKEo)fT[X7rWMn)HifC/+KnG]P=Oo(9YVb.'S%4D!@6Qgp?IJaW2(iFAGtcm-NdGctItTMpnIl&GH6V5;3Mr?.Cjk@nos+&rf!YMW`2j]h3HM_M<*>Q';5*XprlQ]2T2S5.pip\JGO%LAjd(OSAT_-c?3%H+85"Z>]D/d)Y!bY@!S.,]oDNh!:;.LDfMd^Z\G4DtV;tXrZG,^MMlU-]9eT]meYO_:+Wf<*AW$%spdcP_EB+%NVJ<X=%]*(+"K\GLKqH=MO@)^fn&nF[)Ek(1Zgnj:N%R)A3^#,G'PfPp+HR-1]a!Gjb02\nH^=LKT/]5cFf/h<2TB4qOTbl/+%K5%D6:-&2Z'P'>ZiI,:?lKhk*g#/FmaH'Xk3F!G/J<4="Yl7NfWRLB?&M;T.8k;hlXkSPI#HPV8qb_]rB$Mb<hn5Sa?<c[NFu3I]Yg5%34Rj_S@J"'eb5Ug-gJnCc]e7dLZ[i%AcMGHp"%@ZolYCpk4aT*qs`i`metIu\Z`'iG3NO`Wnl5R`l;5B<i)TcgqTKW\p+$_cCN^^%?N)bNZj5;<4`@^^.uQo-Zer4ba0bNWk1oi<@o]KW/'CQPo3"f@HIk2S[LNi9g[0c]L%aj2nl07:rnmtg+7h6>QiCmI/NF'&fTIsa%HW)i;f[oN9YE/-;Q%t>eL?._0kEdfF\f5!lCO<Ic[ADX9$:o/ti7.Uq:W^CeWlE0Zklg7mmF>k8@-m5fG:mU3@\p7maqM+FV=UGg%kC%EbFEFh]EU(TdcB@-]mTXa]E[YeRe`MIs2u/ri@]n9"YO*m"[3**p-6n*5'8`$mG*JSu@Ij4kC.<TO:a\ATl[#eB5l-/mY[UBC%#]X%:Z$EeWkK@V:41d61)E3rS9l56Bb4\'&r]L.,YdSEI31+d3V3RK2n`d4QmGkfq?E(A^0t/UQRSQqL\'Cl@fC[k<I-J$s]tLbI%DLPsj:af<cl4k&'o=TAGpr?AakDp#)p%I4S;Q9\!J;g*c7)T.1PJCF<4mFPqj(7XZo(I9+C^_a-e!T)aK%Ogr*Z+#7Oh]WBkmnN1%E^*LP@q2,1dO.5+peeYp\_L26IUE&]qL3@a:%R3N:NTogro(VZ%DSj-DYt<,*"KYC<U]iejm\1890`@k9'F72`6Q&DEA59\<O_\A%l[IM,="]_*or[]E>Q<5?W1U2Y70R6;:F);4$5/Yre88ts_kSRT^A2++q`^Sb<Gl,BI&5kJ+XCDA#[+$E5Kn+M<4]K;kiZ(,cc3#p%gP>^jFaO#Y;IqXQWEds8.f1TS3kbJScYp3/CXEC1kHZ'rR@/".Xa*guS9JV[YJ+)P9S?8@VIKr@1M4>?XA8&h''lnYRVnBe[qb#1%kJQ*>qmNn[C)j>.hsR@q/[hh,Hp&A=0_s^+>C1,PFk1`^c@,nPVTld14\?iebm.IND/:jk-Ti&eY&/RB;$?u:g`Dp^(Lcl(o2P<R%?SB/Mfk['5p$3Y:#g!k)RU(4gKc#>9T1KFk3UalfH5M0HI%\5<HsEdq?<3F$CqS>[%MK^Fm/C6#(I((idtCiqN&\)2+?oL]WHM$;%qXTE_H+o5#R&7p)%c17K2SYc#"-ckn7'ijfo/3"b,:5S-Z\%o:j!P'*%-rXmZF:c@qj_I3S`2.kp+L96VMuhtK4(98:DYYtSKl&j%Xun9*J)H#A5BU<6*R@,fhsJ;D]0#1Oq&<%CLZZ*OAc=J[G4k*Wa8)$F.Z/MX]-@$dZMe@HqVuS_Nc`=.Fg&s=iX@_XT<4nPS"SdI%`)*p<V]FLK?\bmb[3Po$XL.WPo:ClP2n,7;_,BARlX"tDZI0RK.tRWZ1>I&"lj<6Zp0:_Yi=8&QS:irU\XG1,/O#JEbGWsuLb\nY%L&,g.8K/Hqbr[Cr?A7Z#q,R;/&oSs[rki0k5s4>$]6K<WYs#W<W-!QHaJ[&g&c\Cdcq'*H'0i#ET#4oH^T?F]d>#o<r.0%=SSeg'%;l7`F6]dY8k)V\'OP_ls!mBAKjqlK*';)E56&_r@`t"anH4)K?^@D0C;VT$#&#>pUF+G.r4>j'_H4Wq--_J&"=eFC?[>XEjjmh6+%XB7_0!Rj8JnSAQ/aG%a;PV18hM!=WlUR/3g]rDok4S[&&AGE[)9do%O2?\WT[XQ+:+:a%iWrjKg<57:<QTurP7"A\CnU^0m$j,hJ%Yn)Gi@1^LuDTJ$[jmM]3IR'i]3!b&-?T(n3*Z5t:1j!rK4"e99OTgDYJGnY@XidNVKD,/\ANi4YI:Y&OU\="U!/*)%F#iIeiB.2Q%`##Q['X,prl!3.K=r2QKhlhs>%_f<["3?h<G&d$b:dd3)q"k]mip+jObIDEp*McVFAf!Cs]Z]g4i9p!,d2d6FpTH<9P'1DcUhYo!%Ng13[p%$Lsk;Q;Jm,4V'e,cZtIhu0>_fD->lP(\2G;kP"g8T-APk$E$dHS7^ZP0#B<iUXQOctphU\c3slKIaq])t@rR9d2>qL^P%%jL*$VDJ<?<"^NP2q\Qa#RMT$hmTbEWX44k#8+/s^IdnS^L2kENM)bQWd7E0PS2b\3h\g<Q/frJc2hY\/>s,k36`teqHM\.F,;P&+%na&7A*6TOkS"$lb]^4Rj*T5Qh]6MQ+SXC,dk.*P^`D["k?Jd5p?V#7kSjpTX>kEYC6K_>eh,T51/`-d3*jLmn'2M]H*hHQH&CrEq%eEiK(n-go+p@BiQD;UGnaCM@0J-QGDp+2]W34.`TDKC0]/#\c-HYo,JL*8o>Ch#%9e,DbM.<j7iMt4jHD"*%I<r<$2^UuTL][EZX%p6K9Z=ul67g["T6q-m,+?GoN"[QD>NDlq;"8ceR9Z0>8*+a?9Q4=0-q[9)mWl`EMXQLUJ/iB@j*Cn5>)S'9o=fC_0aWm7<\4T2LV%Z'M/U"_k3Sc?^8Rd9`4kd/`?_X%/crBYl7t\AR@;kZ2'd9F<?>honK67QQ$BGUI3iWqtS-fYq9e8(#p/h0IoQ54c+,Dq,?LS'F)C%CkcEb@"_,c4acNh]mQiUp*.dhEqXRS"T;H#98h?.e&h>KWqZ5TbM)-ek;+6hX0#aSIePr`\*":g\R?KTXS\sg,J9@%HN@="a]L3[%k'ciX?'b*W]#p!,X$6N:]`A-%afP8QrN!XAcclV:c%d>8F]4Y5JQJ0i<FPmQXuTFP\LOi\W9'_gq;[tjWUI2qO5o?E_t_WT^^)\m%445WWL3Ib<r*k4E5hLc?]ILW'<Sa8A]du^sV]9IA71jWqdh:`VPW?M_I`\dFbbEKk"[CjZRr>d9qI*TlnccZhA?!QHXmB)YYEiM-%.215<-]7EX7VE6T5]glbf:1gH20JnpWbd(\cr-gjTc2:9La<Z^YdH;<f68ph/1bb>s52piUDS1%d4Dt5q=NBWZk(n%^E/u)o7cpm%b1_lUSj)&>C@+LNF5u`W7dKd@WU\aq/f#sQ-e4b.a4t@`[dG&&_309"+e)SmmNJU%G1,t'Q[u8Wr,fCh\)2U;Wc.f7/s\m"c-1W+%hd4/K&;fn]\`LjB@l"?sh6HeQ#C?('B6e=]Fn'!YIfFe*CdHb+aEYBh4A-,\_H6'fl\C09[?c6<.sD<F_<%M_[J?/AO/om1BA(u;%E)s-L^)C?:gK._sr[9-9TJ1<K4n79J;\-=TJnDdJaP<U,r&u3ls71T%-@^2&2SDp/a8/!Za8<,q2>r>34o'MBk+T=J[d\Zl2)]Y_%Fs3hW3Fl"*RJq,g78,VlrI:k!@[[RZMLU[<ilX+#^K22U,k;&^s';pd-':,Y5?WZA%:i!l]V_l3.[8fH@t+5AQlMAfrtbD5;%\pe%n\am15RXun]p3-CR"OankX#)0fb602#']qM5'@(_h]A8Z=o"RQp(MGO(Do^@:.WRQX#3(oSFo+'BV)k]Q0NkW"22L<J2%LO/h$D(%>MI[$*KSk36u;d=^pUp?,93aKVuH01rO?Nt1J)FuFmPTATNEf;Vo4m]jr%9dL\#Cd8A'`R`Ap,Ud3mdhIS>XPU('3:%Fc.hGF?0,%ohI`;m?t32o4Vc^BhhEKGM\ORVeS6N&@*K+j.>6P5H*ON`:Z?\3*@BG36UXJ+Q.H?&$FL#&gZN03P^XISqocPd&TR<rK9pSM9YL$%baT\;%Tj#6no()TfQ"^Z=EiKnLNJPc*O*@9]2^btf;*nDWAWFWDR$DfG]'p'pHjq2>$1759'[-0Z@goR=9f[S]b9TsXdsC0_(hHM%I#uFrnL>'mVjjd,!C<"h5@rN75I0XM?$SDWSdQ#BOcE)U'%%8Gn.IF!&qLC;9]<r8'M>^4B<u`+B#$t!\]a"\#1+ILG[_fFpR*2\%j_>n'^;#<Yd<Uj>=OlRY?gRb86"!Xn&7@DWTb@NAe.RsDJZuHTpagtM>Df!h/EArSiXbr5!F_tBD]fDu<Ygb-_4aGoPiM*YL'Pec%R$(;,_]B-'0Ht'L5(VZf&(F$D#CI+iU]^T)q>afW9>#R",+BXj#Fo*)_@Xm%Z.$B,`2GGt$bgXjct+JUkRFkWe&=rE8K9o?QD9B,%X3*[TR^!>6!^:`k4UcJN6Cl6dJ.FUq]5YBg_p+lYRZkR/YqC(bL-!(.2kORiKi5oA:=Y&,N`O^+n$YK\i(/+NAWSg6(FqZ&n*/i.%Wq6I+QH39tfMT23cM5uaHGD,7G<#6o'<4W]eVmS9p0/!k+b\iF\DH*;XFr.J4V+hb+Sn'`"dlF\jZNF0^:RUaN.h8PhR#:I08k*X%7Ms2*?#3<<<eaetp-MK93;,8-J`&OGmi4G0MpLDFHYGHs^Ni[DgDQ0qq7F/-YSW%XaQi00;L'[J^U:(]Em6%q3O$V)VmZ1*Fb^o*%]qX!@gnTjE0.st3)gMD9\!!m#@_P!!p01Ht][FK7iPgHF[\%1MRcQ!oQTEC"MJ$^Y!mVA3AM26N@+4f?9>m`.bHbQYiZ"'>OAD$,%f=n#$-5o24a(FbbKjX2kh$+AQh/M-s1"(g6V@n@J;@VVh@jW8p<<qKEeudD85G[rp)U_7%^lR;6.'oHEdStm>9f*'E5#?s`\\7P?%O2p4nDgoq3ZH&PF9";Cp*t$<^o=<@3cjMgQ>k*D?=*=SPA$=YAj&>@]f:RG8a%dX[IT,fB4pqRVk&UeZg<@_)HZl7&9)@?A[,*A6%RU&"drOKDB]/+Vn@"q^W.E\o6KWJrFgU.R+F#MksgW0KkGeCL"\9lKgd6qL1gK3Rig<&[!_rfR_,IlGlWr_qb<QDfun)Cr3dHe+N%%OYPer=Iqo"YZbF\-hqK<fq'F7Xa0AK>D]-9#'F)k<QBka3Jf+gJ;uH_^?suPt;S<m5<[Kp+ZKM0e9]NG9&EPE$RBd6cFuE523/c%SgtWcllDW4XqfC>fm=Vs;_-SA_W;aNRSQWcN&aRI8E`,/"#T,9lU6'(:F,_mi\5QjV#23ZM7GB'QeejLho[\"/$Dq.r-ik3'*^$@%#U0t3(8AQ1.7A_Q.-H9\fG$ggYomt1hQRK(?hW'[[5u@UShcV@o7*)7KY9?_\DDVI$Qh5?8gPrIBlm]h:r0eNDu=p+hQ-\*BG]0m%peRU`nC)Q=Wob!Qe"d3^V0b.TBs(Z>B8V&^L!k*TXkhfX\EuJeT'PcnMMilDhqpNOfdJHg7GVaZqn>$aZVdm)2SGQqq8P;:n@G8,%fBE8+J'j=pJl:/Vf6&Z"ITa)B_'r,$XW;dQ4P23RNaAg4d*'03MDn7Eq@>`:Ud'<,dD(Q.EPHbo9e"qmf1uQC.3":7CTu!^Tj,L6%Jn:3Q;cEXX]q@bBgQlHH7(2YYRQ^W9'n4SI>t\$/)q-49.fG2aq6SUO:!V>0_K7Xl$em.8NYUhS(AMt?g\>iGpEJa-GlsBRLS3`a%9`-naVX&lYG%m@^BF^&&2DiA^p#hYEZg\k:PDJqLF7=A4Z(UAOg!OLl"B*4HD&Pgm[BcLS]O]Dr:h6V<`O8c!nf#ZFAoD#nl45f0%0W8?<2?SHrnR$s;4H664I]m]t3%I*-Am[^6;G;\*/gaa[$j)Y65fq@f#p`]@CF`T9V9N!L5Y9#Q3a0pNaqe$ZX(Bg]h4eDFFi=YM%UBS'</]\RY;U*e:,'kqVhe]E2l_[P/S?cVf7G:L?SjNrDZg8SKJ]KH*Q:i0uQSjE"LK8;\VI!4.k.7_lcaO(CC2-5:#/SC32>!Qq%"=r"N>II2N%\X:_K3IIq4W=QbU/M5d.af:gQTEKl"54@iF2g[J]kTj!Qu6'5/F9`H-57SMl7I#KZ>ItBpX"d%<"hkD\*TIbN@%8F%(qVUbRYu$Ne4)#OY&3aj(#hBZ<]3[A-Z9S";*m-_h'f;U-$hDj\jj;(fW!:Pq+(K3!%JgO<\Ohb)UD?)/@-2Nj_CJYb\s8LBgdWA%.rC*=17G2L%]AOCAQ,AGdn$,s_?F4"[A)rN$(5r9R:]&6;&hNnTpHd'!ju)e`<)E4*<R-igSBPY$8Bp=3dTIu9s2<2GLWq!LlLA+%d%+b6U4k!=[\YrGKL4J;7[I'Td'IBk>;)JGAU/>P'S1`d/V9X0]7u5V_E+q/bmg6NIRGlU'pK7D9LF$O-h1`a@+lJk_iU1`(]rWm%K-=p'FM_n>-n>epOA0"2No<29OdNSs>9liIjGI[Qk:KD>aQTeE6U\?a>;U\!e@\Z*?(s!H?\r8gIYeL8U5:a['!&*<"=/<ED3AD;%8Yi3PZ`Q57Q=)ZVQ=(7aR_$UV1sD\f@RV&b!"?uBrD>-#J#3Ds%<$u9fO`k]fgQo8cjZX3eT<L@XuY:S_:D^t;?Sq)-CMa"[P^J]%SmC?:[&)<)/.'D>,ZM30/"qW0hZ1[_'b"9Y9oJHl+nhpN#/LNJWlYF%@IR6$'2p,9U(F*?<*e7p1SKgP->s_.Esr,OMAiKi4b//%%!#R<);>FAH$$W<OiL*"PPB`+*e(,/I/5,/_U-8!Fi@!HWSY>n5!iCrk(CbtqUR9tXbi`Xu<*aMBB4A/)D'Uhk=[LO<]ZB8\3jA\>%'J`.!J8liW9TAnErA&5sctK0`7KJ8Md!t\,W*59/'%G/Ib_&G1&OWq*lU2L@YhK:I&iJtX?a'RjA;o%W_&'j,dkQGe?YILn_@9"X%R31WpQc(50i=O:b60g/S""_i*'.[,!*2t6XJH^i@fU2bRL)iBT$\F)/RXPRO9(A^3mdaBis5a\g'FU'1D]FC&R/^#Vicc;E)B.SC%AI8j`XJcL.ROebacQlIfeYEg]3=VngNbIS'@M4Q'a@R0t!Cg_W-ed(h]QKd<8V4g`BTI^XY0ODJU48Ur+X^=Q6Mf(>&HjqP4UVIo%!FdF2j?MP-*X4@ff)Xi-\HeG)n\(6_K;dRIY^Zl%:"+cQ8(($4rO[aW5V2=(#\JZiHI%6H.QAH./P@qK<t+6\N^g?&>Tb*0gf6:(%S,nO)(,saPTb?l\^(;%.Ebq#&6qSP-/o>8ET*Rinig>0$FC3c<*RKg6f?st\0EU5//N1F%*(EHAV4K8P4fCWQ!M1MX8M7$e-=dFb%`AL5ce$GgZbk$YJ)bdH8J<Qgs!l\8"@k0B1+Jici+B.+4#,om?K4e@EUq:1B2$i9G+;Icg);pXZ#`0%!MP@UE/eY"L&<gi74(S_t%'P2t4TKU&T/8=hMj"UU7YZ^pu<RS1PJ,5(jNTQSoq'Du@ksRpd5s)i_g"R=_n9aaq?Vi?$\7AGj45!Ap1jaQ.'qCG-5oWOX"c$P]%)au)a"9Cuukr/r+L_2BY#Z/lN+KV9D^lhSu&(7,cR&h2T:pEue&;nVV1^P)cKsY%&<cl*,)F6/6oPbh7k`bWF6;Jdd@Ljrc"nlUB%3k:ssWE9AP)5/HmcSUg-WW_@\"p#_Y^jm'HP=;:?BWc4grEa<N4)uTSPKd8WcUJQt!qTmFQZOu'R&H.oTE7U`5Sa>2`$d1m%-g*S%"Kap0K@C.uF@R_hVW.rYO:][B)2/N55:A4%a7OA@pBcR7Zp:+CS-5WA#%USpM[ZQ:OE%^gAu,1b%aS8@g160+Ni%Tm,geK#8R^XF%;.1t_2O]`IV?4AfQ>&_TQN_mKLs<=oFbjp8RPCU$X9DUT<o^IgA#"Sn.CN%,68MUmYCO-:iT`^[!u"GmXn.GZYqbHr$k)3DA<7Zk%'!Y<MUKrY!JS%8#_XKtrk3G(20H()F3!)LR!.Z1=k@dmmLQki[Z']2UU5gE_-$k-B^e,"XXFM8;i2l9R%nPduP[Il0W5'`_muuC@%0@^BX5*sYhgIHFfC1.=L+cK/m/JVs#jV+I-U^3[0;Di'QW_L-4[<,hZ'Ack;O4hh,"kUbKJ.P`CrrRBR4@43o5lmF925l[pjO_6I%\t8HMcid=@Q7GpIa'niH7?6]>^sZ$]F![WU7gDY:s(ht4JJPPI,b@`A$bC:o9*c;+4R9R46&:P,DPP"%i$r:1@JZ"O,7,aH,aDWB%#Srl5;bV*icnr!If38_f]8C2T#/W5al2oqEl`_S+\r?N`-g;ZH2/($)8:8j?La1:kePH:k'o!CUa<F,6QI(JhO`4aJ_F5\98E(SA%>+YP_>(ej>WQp0XMTsnL6RQN:FUa^i&Eg&II(;KBJZ)!HlL6^YG.>=F!01Af(^Bh#)NY`/"+euXdk+ZIoL^msaYIqJJE895^[3`@%+lHS?Ip(:^,1CMaFB1s0_)$#&"+HmN4JC#3<CF.s';6UMVl;\l.Ga(pEstBS.^0mm+<X6`dk:]#9O[,hFbj`M1aEg_Dh7,RK@!.u%_^r6+)>L)OBWaWK@lrMS9IE`r=Yi@+"l\N_[jlJDR&Do>d*dXJ`dqJb'3f()b)i0k.Q5@%=G8!AW<qR7,32"3;[(la\uLB,&cr%m%ktn27Y[6MpO(jM/jrf<gNlqN5;qM/L79`kN&D.-%fMK*5:k8qc&gPLB*I=G0p6l:U'rmK*Q'6B^'n4@GNF8HLK!Dr!TPki?.b;U,%6SF5_/.4RrgR9(]__+l?I9n0H(u83?jtRKCan=kTrb'o[lMq&"%CB(?9(7-%a=Qd<c3$5#N0'[5)-S]PZYi.l,N[>%.`e-4?EGZb%LZ2jm>B[LVD%r7@,$kiq"LssQ_*t'+\iO*8L+r:r#7XDCU4e6?XGLa`R[D'P(/i42"ZU#n/]%Z(.H*=p.Zu2.Y[DD`c4R&fMkY+2%l=!9G^aj3)nuPt*fq9IAc$,>;"=gVnk*E4W'__";,1@8hSJ4R!,]>#o&?d3_a3InN.nS:0,$8Ri4)\h\$$='a`Io4bAd!8]SIFN*%&@S#/D&Y!\\.tkW]r(0$T7cQ&^MRoqe[:((.LXVEKu.[$70#@^$Y2(cdeNN/H]@/_:aCT!T/Y"),1D5R"6q7R!D!G6::"d!)smOC%KRe%4)8iMlqr(Vm:;D&UO.hP.^iV,d6QCWCaW+Ya]PHf,"u!dnBY\$S!_$5EU(J1R2=$PW`_fFXD;`bB1,(t!Q`VC^2H2[s%nC%\%!l.nZ$NN[La7c.Q_La/c$rs!438>s0<rb*YWG#BX?b$9)C9lu<\i;<?'XeIeOY"ECT*^bsSX]C#[.gFJke_ohcL):FfX!N."ioJI%G\In9TL7[^Lij7tP>9BZ''_`U?^dhu%m'>3K7JLSka[YVF:t#EWE_?_7k/No&25PW,_t$Z0MO5%^OTp)BVLV?@Xi>/SN-+>@XEpS%j&sn=DE'2O=oMl@h1eGPKm&>77"U`Hnk'#a,bZmhZ*Jlu_'Nl!AuL_9=:'+D$t&)tc.+tJ=0s]9l]1*SNiH&W&@d@f,u`n,*PP7h%-]#Mem0$[WNaL5q&r/!R)8t]6O=1H3O44@nK,+1E%AkP+2%pF*D"s_iFI!c42'Nj.$4!f2/^jij3^T;:@"cDWf7Ch0BI[QG!)b^;%XK#+N"m0Lf4t<Y(O@i(hiNNL<a8CY;:1OC->%^'k?Nc.7BgOlfMBI'oY9.%]23rZ#>ekf1dUNtl)c3?0ifM([7n/%>PsG16;8?K]%pmlAA+<%LAB>4X4\r"\r2EOMG#Kqd1dW(\IP6Jf:Q6l#hZ2kKo.'E'eED_p^d;]o[?Zh3q:gaC[d?-!<ZN)&9X^r3_!D+Stjrq:7%3pcXl:%l3:jFjR9&Z1($'iR!/12-u\RLE3gWu-T,BrGF,M/]3jWQ@!Z,o?\0#bP@e>nDn]$4Ks8i@3gh1r=-dK.sJ=fueuR_IZE)%!q)2:kR-8<5epb2ITr11]"t],d0,rf=]3FUfYFMOje<%$'.0Ka!p'^sf2ORJf5uko3c(_(*f@:F'F,CQ`]1+L#&F%Q?!Ub[.A4o9%fH57j_l9;lLiXo9\Ba7\Q=ViWUFPUb<oE4M:;R5PNjiCC(EAm\&lq,4`-tLj<?/)F;oK?<m0^Rg!l]35M<T<&YV2kM'/^VO:$+;?%?J<bd%EWB:B&FF8X[3=Nfh0[-6&2J^,)*stKk!L`61F-VH0UiYs%*'BcgTr$+\o0WFDUm>VTqsq///@1O#LH738q,tn5'4q$jJ0]%5aap<Xt$&,K[VKe!g^!hhKb),,QPFs0WN1$fWg-Q)<.HH[m`#siXQJLpW5degRau-gh&+'9LTrUnDPG=Ic;Q2KoG7:r>MhX&:lq%%5S+)MikVr:G.D?IHgu1b__t?3`_ihR,"-uW@sCaK=b&tP$3CNc3iZh!_.4pUNWLOWa>_!OB5e3j8M2*rBo"sg+W-G>#@,U](Vl89%Cp+Ee&PR"M$UqfH=="<*g`Hj"\`SmI$EY)PNQqc\\cA&c1t]Gf$c]q45U00M+OPd%%^\gig8',^$p>=?+SIAf#KQq(4^Kbr:V6k2%m0K$k[_TiZ%JIg]\r+C4c*YI+JLkPVOf$$mD?BR[bS%P(=DOX@;`Ll;TQVkmV5YU`KFaab>8One6Sk$?%p!CjXu+H]!bb]6nE]:k%Cf%_(;3n)s?@cjHZQCobDKnTX51g!DpBoi."))3GNa,RmO8)/@nF`Ik%6c9+DoG8%9`QL0WedEobf4\AJKnkt3q"]5Y?5\sQIn4=%;HY,=30<O+A#aKLZKD9A3[,`N'-.&;9Ne5Ar#IbkK^^a6n*Gu[Vsk1@U.!G]D(j"&Ru]]rNc<LaIN_Sl]#%;I-.j?FUTla[XOUk"%E7eY,$F4Nr4ct<b:Ojl*`*i*hmHX1NTn$]%P7Jb=TSV,'e5a>?:r"!E.LnbT!(r4[5G?G"i$?+KS1JDqOX3\*"%$+BPCjCq%08*k%2R_m)6':-HZ\A%jU;9?:a:LQ6dTED%9nYgjpm59:?3)ph2'K>Y3\X2X-;6<n1f0?QZe(ZK%+#9KV93mM7KaWt_Q<ioSW!H#hgc`$%1iGpX.YEI(hslVn>U2WR@&!`G@05s:3W]gkK/\W](*#uR-Pu[$-jo5n*$1O_37"o2N=^u*V?I-R$t502#?<<n_rT4EB#0G4=GbCX%J2833NK?C*.^77I*;69k%b<0=i.NgBAj1YU'Q$<\8,-8\[]@&XWmGShl"Kd"gXu8D_(B3CA$9l?-A]Ve?Ht'1.4YeE[]uSWW+3]U%@Xg:Ms*Cr*"T0)QGj$_=1ndhSLBt*lVAisPNH7JfLb)qWD$afE"g!O=*0?CZlmLP7pst!teDqgk<nQ!b"'LUH=#QZb3SY,V`)>5Y%+_-3tL>C/oe%#pLBIrd5i<@/>NEEs[p]U`N?,b?G3jcl'mYG1gGgWkAcmdlQJU<Jh?8r'EW[@r.\I.;d!L$OQA0MAm8=W67&u;,`%KW-;G<e`ScAfaUNJHK,,F!,YI$;GciaLJVUB50_3"c_*:TaCC]]!P$\.0<XHC&ul$B)`CG8g+g9a9e(EM^A`HK4,(6oUir_=AJ]=%RTPs7K?=6q%\^Ld),LE[o*J'4\8Pd`&BX4EDNYiQ3T=ir.Z&Q8K3^6!S=g)3qZt<B#PKn!ZYbd0d+Qda18)L*$[@(o2F/<B+#+.;%P!DAl<+2h,$T=$D8D;7MB#42j*?AP>34;;--BEB`!7*QW/tnb$Eq"'(8,DH+#/LqXBtcY+djgu'W<V4+cO=[rSo@hAno:&7+XABH%$)n9=;%CXB=<)Tp)I<a"=Mc,85I;Q`M/3qXGUD\ZYGE#?`"?UKM5)G^d=bXUUa,et-7G-Z5a.s'pl,;aeC'"iMV3iMIQgp.*Z6\8%Ed.brG?S`BT&OR2c&%I&)&bfXLe=>R$dZ*f.`.ElEL+`j?'8<-HcUu'Yi0XMEGK%<*KuPg5sq:_Y\BU/WoE4N6^r%p.?Xa+@HlVa%`'HEJ3OF6&Z,LFg"eC_TV\<k,!_4Wp@qn=EM+4X@@tHZPKV5X"QLkhe1SW3I!aET&<XXA=%e?q;Xm4X",d4\qYXN(l1FRgJAVj?5%KmJ=D$)?=aKZ\/K)oRWACPm'[JC>+5&lZ^Ikecm<`J"h.jYO;@6l;[M_$PplL`Tf@e1T[XMEo\G!gk.j?VDFl)U*qMF<)<rF4?>"%`^,lJji`fpXftVnK1RIWlj'W#4hk!8#q,i>GdG1lA!<kqJfL[G#T/(E%bW;Dg]C8N4qAb9.%3D'P>kUS2Vr-R=j;"G_7#HO[g7!s%SfFarIHc>ki@U+c,)_9/!fhk8A]AUSlQ?mQ+.^PODQH0\E!DY3/fUZ;]Cf.CFcWf+m"H-r8?f.BdSD1mUDk.fIK?Z>S21::.ZSni%n,UXD1/hK'i/ou_f$oB96Ne8d#3tE(+7aeNP<sg)`sL>8?:S-@U+Iq7!![R>EF;6V4"="*<DQdsJYFX&GL!BX43$nl&NAYe?n7*N%dfgg'd2gfZ/sIh-o<ZJ1(,`Wn6aWNN*<`.QAML-Mq=G=Q),Qmg"eB%7LgHPg*,@'lMh804O+Ul#*:;[j3.QlR.qB*ppg"jLj0/hZ%%ECNFV$D1DMc3[$&cPPX,91d!iC$:N6=_<)..BPbWWg..G=7rj1K6b7Ttt5aj9^ACY(gQl2*r#AQ4+gB1Kud@dm\h?;e@f@>X!Vf%'sV?k:*pRM5XhL6Rj-o*&\nYT;(SlfgSX893%Q0Q`R3QK(6M$L'm#lUU4-ZNPDf3,!jWF9_$g5#!eDQ^n^_u;`)niLQpCc-emU8j%GTX(=a's>8Fgs\lLkSK^Pm*0aJo'$NLZ=8:+nh>gn@J^+E:Df`9@j;:]k'Ol#Yk)&7<f@LhVjQC1.)2%R'pf+"_`R!-G\9;UPPjD%h(o+3\.jLtJ=e"q`>.-+?4:6P+::O>6dY?B-R4(k,J<gr;MC$"a^Pc"8#jA]+>FDI(e.PF6iqjui)gsW@mIf9KM`2)@Y&IM,(s%Z%@!D_k'sR@VgWQgsT95NJCg=jhPkQGj&h))q!ZV5di^KpgZ4mm="*2qg7Z,Gu)plq86U1[[G#6!J.!EYL_&iM8`"!'j3(RE:DK*bJ%A;4SZr";+oGo$mEC/]\?#SCkhBr)gLbCPQq;N"hq#ft$-PKKj41bI.Hi!B(L&`TpK;`VSuOmR`lR32V\J[R!E)]qT!mP0S+`l;E%%L?aZ<PN1:mh=Of59qQ9A=Wd^JJ/&61>XAC/UknMg77<"(d&Q>MGWs]sljOaq#@BKCdWoMUgH<EbmG1@[n`V!MEDQo"'UUg/0N<!d%cY!g97P0Y#Z#EZZJ?cA7+(5;"E,Qr1e'bo`!Wrg]Yeb;b63ON>&5\J2GW$OG(T)p'6bp^@!JO&*$65j.36gt7>_!J["&WSIF%`f&%R(^V9-5SDDiE\jY,6DjUfjlM!E$?KZJ?VlS,Rog!@E2m.\g<kqL]t$t9n4>2HB&e-pqQQ^2FQ=sdXs#/eM,WN@:l=@M+?J(j*!i]%%"*F.+2aDDNX4BYE<62Va0o@XfVLi[Lo?Xi"%N#9&X5*[!gX>N:p-sXcl.)ekQpMYrkiDNK]U"D7YG!Mo,#CM[M)%"+h4mC&6$Hd%4b8.c=L$Whl6tX7;+F.YcK!l`5QD-2M7S3a9F8c`And'KJr$\"Yh7^s(VkttQ4_il,,i%[ENiBG'rE>;e1hNT9u($A,Y'(4AH6ee%3>qrXpu#HCBil"kbWqH2^:Cfe'QN1BWD'06cD#VU^d%(=rN+K!^]t0lHf?G,'2^^8>&[dUpon*Hl[ZmEA$$;g"tg9B6Bu9/ZqS@j%C2soYHQ'%7J.U@f1CR1oVopReCk]UA%SmZkB7[La^OZ]2=;pL)83K78-846`$3[@j3(=DCk]$0O?4_G5ZcnNKK-O5e(T`.@$=[E$%D5(Xp(/B]a&?4^rjU^kR$_XnAL;Be,?;X7-E,B$!,SWgae-m)&Sdt)'[4f`Ibs[YdMnganc:A<6i^#,hf9i..&Fg)[Hs=s<2(1LF%(^@Oo!]0u:%5"N2+<T`li2*jf\'Vf?@N,U#'t,65_\E4p"WWUh946XG:gf+ncYC9L$EY;N5VW"e,+-neY+t"tk9Lc[,0Zfb&CVm2%@[\J^MALm7?kln]22%FV`01b(?\jLK*@H@aNXe>:J.TS6U]Tn/iVA%^m)%V'r"?q[nA,?ALJWjFl?G3"cIYa[IR95fb`t0)jH(dW%na*X&feUhj&B=rDMF24*kVL&afdZ9S#YD_MBAX[ReQ[Xc$S];,:kWe"YT4F^%g%>'Z)i=RmhTJ>JqtE)&/!kXe%Nl=b<uW6W?Mh)%SY!,PS3pI0!keIm]'u^dM"!DMncMnalH5k>`Kcm]LkEYQ2*5q[?'%&R=G^'A$_pl:B:t'ro88t\SqBD;9eUGg+Wi1%,CpS3b-Nll%_PA[P6?,cC\f3II7'5IAe3Z\P#$:U?)%Hr&ndEArZ=B*?)V":4-eQ3IOVpLO2.\m&MM,A'1oDpW2deKd!Wq6WTYOqA/G<83:bONe%]FY9ChD)o8J`<\G:@JWT#DWO)p4Y+o+(-S6pC2t8'14<B"YYK0DqSHq!AjuM/C'kJp=ZXCME"b+1$k7(9lh;Jlu@W=(F6eqK=5`f%,34e8PD[4PStH(t3F,$2aWa5C$$.bUr<)q:\,aQB-Bl#XHI4p<%Do$`H-r"^iFmsAP>F&0\Fq2u!`oC3=TM(udPX?\6*Z2-K+(ge%7'X%Ie?kT\M635J:E)3EdhLNAiMC5n"b_`@GB>HqC_>mKS\PabS^J@reTFMU6?1QZ49M)j(?1:E<A;u=:]R[&#X]AP#`UJe#B`^9%Gu02Pc*7G6Y`Q[VHiSrom$baVT?=')_PDe=%13M`3[%[_,$f<-?!+tM/C'2.%,>cU,5+e86.i7?Rb/UOWm+!;o5\.HZl3'i:mX%W%^CGU;LsgB8pf)V6-PlQuhG)N-l1m:tAV3G:q)G?c%:&2o30k2/_UnB:Nb[0>?dD5n^d1cDf.;XO^XVlFbU/aUkMquZf;5(b'ek*0%kAqaG+p.m0+%7`@V4LI6=i@jC4Wfde*"a1Sq&2-uX-S&qg&FD"8L5FO!mKd.73?12HuA9%0g,Z+MEVNH%81jD?Y.ip.S6oc^Yo#W%D[*#V'cF4!Lo&U+JY57@#c+#)Ngc*'H:H+`,kUg\1NW<[3d'lMmeU$u6tOBe_qj)l)>\m7)C5f?K_0O4E^LoK98B4%VILfn)#A!k%IYOQB38e;X\t)X6!IW>McEFId@JI@'c]C.jb&)CN5`hr`G!=W;4hI>;,>`7ugA*!->Zum,cEH^rJO='n^:4;*@@3T-^p`hnA9L-d%+Uc6Ur//9$k4uIWnM1N?]:G#7ja#*fG^NBiBm&2+,fCh%-Cu)7#kfbWrKfMUCE&!GJ8OLcFMVWG6Qb?L$_n[;UgLn=h1e+Bi,NWf%aj;EA"5H:'oDu=SV&tFU?B`[:D<PKFEF3`R+1)<ZmbEW=pK)10gX$1pJsOW0k-6b6R]84:?Tp892Nni1nK!^@1!#M0Ld!Di)%aA*%a9$e!<7%<8CL-Qc2:)eu5d5\+",$E3NncMo;mfE%?H!>a^XhJrF1"J:$+W(iraae$FP@?>WV?:rTL8J*]&ErEBak`OFfYNC#BWVc%WL`:^b8G>MWQArM*,BEnhYbgW+EZ?L=Vt5I^;N?ggg=hpp$bjbA<l_1nUl-:(C$3n[gf%:9:;Y`d%U>P?1A#YPs@MI(..u8M3+K"%[fgh*n@)B$LMu?c?.&QUTF[j-p)'FkCcZZ2&3bP4s0A:`pXd!N#FZZHYu9fkC>HsJ,>ZjjfMhH=2+7TjNsW'cS3a7^\<IhPgCP.*%j,>$E6&4m3Fn#]%'ne)WFI=D8+6`-`1[(,I1F-k;TL&>(](?)D+@!:kT#UO+38GV]W!Kp["Ee_Z7k#VUQ[8AK,B@>Zo`"C^g]A=e%Rb^jbKC5r9`/B6L95q1L+0-a_D23!8)K;tmIs2Ybkl+ae]KJB-:qFKB:2`pcTL60k?..*1V1Jp-?gI8)@,:mSS6DF[)ZopIh)7*U%Cs^ohkg9:9Y20(bA2i1nhYs0o(j&DI("`DM$6"#9X_[[I;Jkorqrk#1gbr'lpUm>3#2NX%o'4?*F=*i,0ogYlh%Fge$%GSO%D'=*%'b/Y<GiJ$F>,/MDctu,mnJiie(CE3FJ$"Vn!;DWgO:`R4r?.FGE!q1R<OTUXEp3L#:Gb80PoutG2LJ9i^Dsg2L_5m:c-LtGh-]L=%QQOKfNX=:k*0/eeJmJ9Gf2j\ZmOpF\f+&Et=\mQePj@eDqf;W>h-]JorW1+ujna\llAMrXEqKXm?YWL),Fll7a<plncA6$7EncEG%pMWpMJG[Aj<,mbSR)tYmq?WWE6FR(l3OE\'TL&>(]&Lu<@4H&fqR[sfkKn'5#`K2"N#-U"r`[qQK"@6'ljM)hCV:U;]$>Qt\dZ*`%f(,/amBM+B"7Cl^c4&</?.gsu&>VFCF>LS&6hf3D1q\]>o^i4kbCTYZI__ZL"(!\[^rO%cK$=88[n`JE6!7k`nA&[s;mcY8!"eRl%C!D=SX*fM`W=1'[ShMeqMX47?dg"Sl^'hJXQVK#:c]:?>$f[-CkgrUlmW=RKjc#n2$JAbt&F)5F9?lem2^sFP0[cl-(-TkV8Hk/B%eDnj_9W6"hFN]5U<iNQA^cP\48d1,c&88*G(uorCUSsJu8uUdCB&2H"(WdJU9CqqjLe@_+=2CBT:Pp>r10=65aF?>OB'Ld"9Ak%B%5`N`Pcb#'.k%?M^r"A4,J0;I@J=6sThZDN&#`'p&T0Og'Kde/]I#S!C'7JFHa^[D;!pKGX4-3H-Ka^T8*9P$Wii<dUI*NH,qe1T6%j9W%Vld?H%rpIu`;1+Z58CYG9J02@gFK1`&VI@8&W%N;342q^e`fSXRo62qHT+s0oZBf.K+_j9:-:Sno*)3tP:$F)^3t%i@\:lU^%RU26_%Ob/":FpP.^/W:"a.H%:r0tYn?MrXD@[Fl"N:eYF./dGl"lG%ZhIlSL=V]p`CrZRa^2$c+")Wka?inDD@sZW=n//@Y:pa4#%@n?A!JHG1<!17n]A2^YG!AK0:#NqI\LoG#\0,$LG+@idi"[T*@!i;n%:qBL`+]sKH4=-^GP0G9Q'KYNs^glO-$;KUrm:Tfp'io\j%N_X+LU>!X#J5LnbbD8ZE]HW)Z/5(4J'[?gM(lJ5\VJUf/h2H=nL[Kgb;+jjobQ)=C5'%J"EYka/n85ZdMRI\M]c\0opoT=:W&Ho<%oP2HsK`k*dUZ]G1C'kG-o&1-Q"31jc%YlA1@h>"m`IWNuAIr1"`WA,B#j?mf"W`<PScmOL9H`!6J@QkSBoV=[L;ir28%%2c_@#.[%Z"K#`19=QgGdOME\s2'ZGOfFna-c$$_6OQ$p3<k/=TGQ_Nk@Qg%$d^*5:UK(DI,'ZlK#^H^RRYrGt%:(*`]TY_=(W"6A'[.oKnL]%@H..h=E^/Jml5BWp)lEfe-mr_8ll6F`lY$_9aWsI5@\H7F2I.t`6JM3-Tb_+,AfNn8U5*galU[k+?G%(LoG[e+bc1X\P!c_lphD"%%ZX4T_K)>?4IH30'O!-G?WW?IOa5<rg[rN""I:;4`pSAB%jsG6WOgU%ZZ[;<o'nZ&%`'ikVAFQIF;)OofP?]Zc]N]V6DXRS2'*]K%ji9,gH:5@#A,[J)@apRVk!>:Dic&"mp3sB<g%HZ]<0*06H)sgN1O%Lgm(K6fSs"!qa7#[j<o/-t(CEr[\T\$9l<p$+=eR"u-pHB$%=HLMK/7`L(3mjq^'JWT")PUp%d@/'"dMC4/Q*\Lmchcl([G+Tf.d1_/ODWIjO_oo*_KS*CfFrSo6>@!4+H.=Z"FK0+Sr*tl!50Su%&A]E8XS!H108\$]6Du1TLrWeH2ZsGJeBn\e1m,r^_&;nZBQ(:#>KOA.$Lbj"m-[b)&U!\(3cleZE80I_\\HY4)$a0H7am4L9%D4J%FQg0,gg2Is?N3AeRktB[DX%VIn3H9N%S=l<!^rn3N_%6k"@'0Vms\^S<lk]]ZckEW+!EE?!2JZVW.405I7>'&Vba[A8c2>::]Sl5%`<*`A$;l$OK>!0\h+Wh>Fr'F:!")[`jo&hBqQ;:nW%2MP57Lm.XQg)?j)ru$\,_YLD4ae(=\QjVJ7=9=/IRYQ.(8QudK)ZAe'?qj%Ce-pI$8uoEn;<Md(I`)Xg9]74JA3Ti/8M^Dh<\r`[gj<$I9P9X)AiV+/fU.60OTCbqpViL+h_gs&R,\6No3$#*1C7HWIt"M.<F:7%da%O(TY$jiol/.\?(H;g?+r#@eR=&Kn^FoW_R^B.PlO1_HI^juK+0KOP9WhD=0Y*Aa0+R#@7tQU%[5F/gQfYL'utq9CjY/q'[&h:%NS=*/8Hn&/o?Q&<FApXEi0b9B1CP*s*op0rm)hdpn"FGa.ZG$Zn@ICl0^tA<Us;P$W2).E.(*pWgDBOH;BQlQ\*@-Y^G($noaED]%!&W/la8hp>"OPomodq:)>*i\h)^5Fl5Xfi*D9sWfE?p^HI@4RBOEgu8'Q.RaDK@E>[8Y2-W27UN%VR>M:-U?85Jhe:+#,EQ<L`u"%"t`MD47V=.W_?JDPQ;VV4bL'^?[*V2:a)uCq3f9fZW]==H*gNoZ['n,jH7d%YgDqC_"0A2q"-2]Zj&9t'`uek!NMYbGm49@;a9?\%'0aU^7kX$mFuqcZB4#d-1&?1:(,3g\i7)jf]`N/W`Q;'$J4[Cm:#dXl7S:]45':HuBprI!/,ElLQXD$$-@oiLGj(4"%gLree[\H_%RW=Y'cHdKOeH`=UX\P]V2u"P):_&7ZcVX(\kr[OHX8167^.&tEdBDaF6@'',,%s6^+f[/)gb2IC#=Qj#-Gh=6R**6%&C,%n37.=:%Ka8DTSM[q<\:`0Vc\2S@$W`P7F+)h<_f1VVaBDNsloHX?bKagZqV_k#,;%LiEh+IEDX/!7li8aP-h\Z=e_+;8mqo]m]]d.E#NTSa%3%BP#L4D.j$8;a#;0n9L';<-T^/t$RTrS\V:65?42&]JL:bcr:!aY1e:DR_WlBE_1W"=C-aI$?n!lbD^/CB#C19#nHY"NX[gD6/!%Z)%Anh/I*HlhWlF!p:G#PkPPV,g;ur:cK"?XtM@PmUU!MJXsp)JG^e52Q?0""n:dZ?hnLHS7Eq(Oq?ahcbQiXf#='2CNWR.aWXog%:CRKuGq_K,_F='1<?@!X.?.A16=!?BeupSA5)0d82c(d2p&6u^o18r+SQ;AC!mOUMP&]__1-rV3B2DZ!P!O`=/jX\J9?K08a$bSd%UX!C*.68Z:Mh2$*!m5*=`tga`4n%P&eK;j%FDqH-XI[\`;"kh-POLi))L[::pmp@K'.FOhQgk>P2j<mT6C+*tm<r_pIm@P3iX;+s%eVhNe$n6`-&D%W!&ZqZN(RD4647DU9Ou[^;2h5AW>[(CgH^,d<limkGV!p#T+177@$s($TdJR@bR4-8jkoTn*p34,jV,$0]1Ud72%Ar-!\!%GP\UbamHd!Ab](*/-q+[6f;]d;]6Wl*YW6"on*6pDgie[qcNKt7FXOe3C.<]:HgpWKRu#^K-qHNKb0=*bA9n#F=SYA]Gs%6&jJZ[.Sg".)=@J_V^H`%:&itYCAM"-=hOd[d*ggQJdKko8XpCQ!t@r"D$HDd.:`M\6]dsnn4DED8M?br&SmP\??#5%J=k8'!Qj0%1tMkPG22+/#4EO<[jZ5*K;P(BJh%@0nG(2(!+!14TiWQ$W_BUuan`%_]Met="<4E65GAD$pa(%G^n;\LM1+NKTMqJuWSLR+GslUi%"nkjZHP<X^Q=ab2bXijPm`6$$b`>TggC7<CK!qiu\%]gV=P?^2@aVD/W4mEE\N'R?KICU'>HCnCSkm[G+nr]ffNmQ2o"N(0GhEG?%^.!WneH3q.`QAMe?Kta8=3[_A?"M/*O1s`PH]?Oa5`3j:m+Z]OfVA+V,E;ZGIG:_#4*KLZ)FPUD^?*L5@63j]D@`f8^5`*.q_eKA%g\9=uadk+.B,o#Xon,pH)AU@%'@?Hi7)A8Fq,iuXfi)%'aUpnoW&?-_nf5g4bR,[mbf@<m^4js'CeC2#6g5gjbPD#D]!PMpW%$"(%qAIeY+*t7eb<H@LOjm:>%nQPoO72KW"8/<6SB$4'KHs2R74Tk;O"!,.FD5ihG+q%YP"36!R8[au;d"\cZPI0RU]`C3m5/n2osS_i%'Y>=iJG_&n8k`nWMTRWcV;iQFDGIeDE)IIcaFsc/\AL\!!)=LK&nI+df$`YY@8mj>;pjgJ<LE+R/b"Ua*-(0UQp/ie:>[I_1G<]g%<U5hm>=6s]Fo/Fo7$I^-n>CdX!p@e7LaW?\AZoVLGo*=Uro=AI4TbUfY(C,qq+"1>Hh)Mk50;k_mN'8207M_;ji<":B@llu@=_#^%=Lr/X:)W7?OWi(lb&4W6!g>GH:_l"DhLX0@)kuF^!-uWs(;PI9%jCr\d3d\c`9Rl"Eb1Y]!0mLRXW/dZ_rTqtYum,U@CZ[F%l=V.%<cE59^,^^EFEH`49n.J$f9F/\JD=CYNrD"jFtW)lf;%#Sr^`,(TtF7'-o->N9)tIrR*=^06<@m3Vr\]*qUc"?"RYque]9=P<iUBO%'Wg;\?"UKIegca?eWT_#V=^M0l.Iqmg+8'rO9VFtPZTG$gs"+6\4?CN$gfGTj>"Q,Y8.f_Y*S=kjeL!)C7#?Tg0e,aPSG]@p[EX`%C16DBE_5QE%%.@>ijk<63`#-X\lV752H:YJ)b>U$6N`Q8<`4&sB79o3W7f^j]&/E!6T9N%DXqq<HuOmJV].ac)(SQ:[6m$S'!Fc8%T("0VLgo:U4ML","`A'p>oPfK5C@bYTHA^5JFl2a](/I+AG!:2CFpX+/iLMk>k4t;_!$=+Ri[]n\lR5rF',J=>rE8So!#?b%p[<>%fjjp+9bAkMnP;lc06ti>Vt=O5V$%.]DK(TJk<i^lkm6<r^-cV\pO]#'k*rsrE[HD9GF&V]_NDXl%C?\ig9-0S>mPF!1e&4r6MdRf%7\/_8@:kWPB-pKR<5-\=gMI<O2Y8eRdk*(j4O9,A\Z0\=l+_j0O<Vj!?C2k=$Xp!p"MAOqgs6[m!+X^%R":9%pNW4Ah%:,q:0V%'%U)Pth2N#81+d1#(-Q=nCPm:'R"Fhs$]>RKR@QcBp5hNDhY5P;n[iC;6SOkJC!-QTV%5:ZNle@.lLEE5kHj89F]0AS:?(bkTarI+u%OE(>=T,_hecGBBGQ?h94TXA[g$Q>RZC79Os+u&U;T&H)grqiN8;62LNFDaHtLN4@s(*>Qu0pSk_ff^cq7Ap<'T_-?p8-[*beF;8l%`t@/#c,0sBb;OQ:pg>\28S,G5)*!$]I@,8d^`bEk;NMQu&QdaM*T@OM?":i;K7[&.oaOYVB,+>BUau/6_rN\-`9)MhC3U^Ur'^U?%rOhJD#^"O;hPM#EGg0]UB1NDOAg,Z4c+*??4,\+bSQUcl?SG0*=U;.ZA"K)l3;q'=e3`BN/n==3=u^fo:X$[iDZ=)[!hc9s1CFlS%bX.(_+$_6fePD:O/)5YgKk+?PZn#<')I^a:E*D3&o(uoc.teCT]f(eQ>aD4Plj"re\A@OXFEIk7KtR,VMoB,K69mA1SQa+;(D#Wu%Ttj=,;K2&m-FIUT6HZjC(QDbBlZA!iMoIF"TX1u7(;:Z.b:/,c;?V@+(m`@Jh24r.E/<pRRN[I\Us-@]%>i_O>ZZ3i$uht%!IiPt%38aX%a'?D`nkg>m)scaaD+G]M<pVV5Ep\V>9Ou6C9m=Rt0VH;qJ9Y[<9)tX'6uqqG\GF4PJ9XG=!/kYfjm?QACa'-M>M9Rp'^_[\%`bA0m``]/hr`BHrh:+c%XA9c%Q?sSj+LU!/bF@S"CG5E<V[4huBG.dF*Q&/33fZHpGNgXNq/[tO3G<TG0P,"<G+'FhQ80Y]^'p1!%a/._<inkGb`<LS@jYGZ;D27?g9tM1C)EBq_b8.sF/4#`?P./L"[HZh!C!mSiTamhE]PVmt,YHJ=f(F?RHZWW!RR-Kf>mXd:.&(&H%6;"UjPp;a`T,QJki2`olB1]o?F:t@rH'q^RmRJrJY.EHO(dUk9B(N+a;RAdo5<7W!.JQp3R@$$@%\WRJfbDiNplDF:MgdcSe-a+K%J?1sGGBOR[HPq]dg#e/<HZVj;:oj]"c?o'Uf%LqMRB+P?>D7N=F/aHL'P7\I/m&\:N&ulr(3$/-Yl/00LV%iB9>T4lh?K<\GeBQd%3g[Tk(Nu^O*H03OX6F;QgD$O1K9Xcig`da),YnI%@CD'2IOu;.]oB:q&Nt74_>_r=:H)Q#,kXD$c'>i.mL"+./Y;6C_1q#&T!$Xb%GQ_kSm"P.1o9\Jc3](:?rk)nXI=#_#CQF.iFRqh6A<>fU\'.eAoc>.X5Re9F"ftXBTX*LR@\/o*%q[_'%jfC3S[d*>O58U'ell`H%E@;sWOAp+7KbuC/49aFa'Its)P<(N?Eg.NMHb_K!_D[1(LuqI]d_nu]V!=uXElD,UBniCC9eeki0eY`9Tk=B8#TuhIj<WU:3mFsN%hV1(+X`iRUEY\SuHX!DH$,Lt@^@)X1;F4$Sp@lLP>F50^SG2^WA0*`!%03Spft97/Qj:HSUN0D'S+i3KkIh&[]Joc\.IW(;DnK&:%H3h?6_^AU>5eORKWdeN]Xs&BdRa2M#T!8/e2s\G.D[XKc9k`_'6)1%=BtUq:7gS:kiL5R$0c9)eiEEleqgs'2bANCIhA_.9mJWUM%[[On6oA0IdGB)IY1k_d7VX`MD%?e$gh>e!:(?E.\\!il^L.`hm`GLV/L'ol*r(l=cX[[M&d,+7E=1pBV%H#Z'%[TD!oe?52Hc&jj%bG]%\4QGE_'G&pP)D5<)gXmE"psMom=chIU)"F3p1^mdK@q*,[aOl4ref+f.O+PZ'_m$b[4Z_nG+[&M'W*"!(Op#X+hO*2p!1"ST%aJl`2HPGd_R8RY$h@ebJ2hr%3/O<jZ+hIscah`9j!g$Pnc?`\neAu%2/S@d<lO@Pu[;G?Pf=)3+ef/YXL+I&%hN47<d0l,oes(A3%OkuJV<Y>XQfa/l/D9Fq<S+O/UB#+<Qmu%Ut&hQ47s)JSbHD/Nc'<;K5bC]A@NZ4;W;1'Z.Vtb!N]`Im@N&O<*Fd`7n19^2'M=Cf.%D!!;3);m8Gi&9Trl*<Wc]E'FUDi\$&SFM?Qp,phnEjqS$fClqr)Sbp\IZe%LOugn<g-_2dLQ.=jX7Rc$IX+mPSnYnh)WM:Md'<b+%[l.8"l[&8rX7?GSD;"#WM=H<XB$&"?`Z#\e@Ur->GVuV4c$3GPb+7=V`H]:kRS0V`1:S>qN44>-nV2_DVSf2HDcgMBrKJ.;+8=0e%@:ScZN&PK5MA%V^gG1)2@(]qH_0VUgDp'cH%E;W=50eC?In@s:bV@t'Z<As=Q7`$NG[$&D-c-ggAY,*Vn:n.0b8K7jrU#7sLP##M%%W*tX7!M)$<MqGs]O@iqn!XN#(`&C;R::ZY@7gGX-bNkT.!e:7[q1+R,J<OnBH:es!d+g)"lTo-P0>oplB/Sn.^E+Kp-U.3(_`0S%0?b0e4WAK%>[>N_T$uNNC,3@>N2B1Gc_.nP1['1[]4#*s.DqMB(SiruT1a:8AbrYtGDcLaFLM6.h<j5Fbh'5\15RpNPc.ksW/ukc%b\-DJJC_]=RhGcU(RRC'l&.hEo2NMX_V>.0ij,tc1/G@@o`J#.2*V2PZdra8`pgH.B2bQn\"u!haE=jXo(#bMKVh-AL4"(Dd@+hb%%Tmm#b%FO18pA*IT\pRS4)4d(8]@]!^h6KV6Blg_0Y+D"h_T:]Fjo5Qer;]5<,E'iMPXNMG72.#0i$ZT>cNbnrt6\-43%mnI>o7n%L+^0Fln!AqF-b.^>mfC=AQd44`Vh)($7k0PfYrercK3G`cVt@%#!<_.X;6FS[1X1kYUifcmOL\Hf$j=g0'YX/n[c<=o]'nOCU'A*%[t[P:o"HsW_Cr0f@*e1k_4GqO$bnuH>^IUX#C&+#*YATn(L\"/_)-G:CF:l':K&mm+IbW'<FdO'Ro"(so#(MAjYU2cfHu.FfOU1l%fI]P2a<jaW1gAYT-C*87QNC!C6-;!l?]n-`niobkRoJGR*nl-92?BJ__2N2n!K/%<aF(H"V@q:A!fp]_,9k2U]V>='0\aV/W>e^R%28PpW/o7ZsTSUV>Tk:6%EA)>p!%:2%1_;LH&RWWniJ"A0D9#iPcouqU"LZj07_ud@&S#B(aA0,a\)/XC6-$%aWe>-`!V@TNmJ<;h%6Cl_BT?Ij3Yt=&!'*,\7IFCo8R5%GS:,`3h>_?_g!-Sl!Lia<]6<C)K-MX&Oc:p7VbKt6FFH_f_27a+nk36UO9`S$+\esB/%4.Lq%#U]UoCJk^=G\aI-W-Qmo8pA%u2Y:DnKr-&#!T(%T38'B*:39_.0nXG^T$_u-:,jE8Mcl$Z!e=ml1JZT;Q4t9Q`eUf1NH.oA-f6m2%!2q-V3@FS934bZ$_JdEL:@=jtj3cX!>VTFNknsk/466U\JWo6i96)L=o9"%t6qX^]:A4#\apB3d#E<c@.E@QaPS6XppN7h*$.g6S%LeZ"us-AHD)(4ru=tg#?f+rk*iCglkImmq>Do+FV/(F>@>Qa5p1;4%pnZd^b;L,*1QX>oO*NZA(;OZY2nFL>_9rNkR2Vj&2J!H-S%_`\uL_d)X.h9U%X(D0EPK_PU#_MO"?;bdnLR5(A)EY="B;bm&%1s3o]\h9'a_`Kh*HO>RMP,AaL-SP'>X7J^*gW5EkjlT:i[:\rp%JC<TE"[@V`c4+G>+3Sj+12kP03&`^[/b.Xla+-!p/C)KjR9.fci&/p&Og?L9JD??g%KOV'>G+&1[blXR5k;B5cs:qT<Vh:n1u[r!%IEDWIJEl\Z2oW"f1+SSZbVP$!?#m%Yg%m`,o+Ifp+-chaEX.i@?q-s\,8>.cN6mDgH-03u=XP(<_q[U(cqVXQ,)Cef!+"$h[N\R_%rODEu`VXc.dj)MWbQHZ$j?AMf2c\taeZ''u\1k'3[Gak%mXF,Uj*4]gcAfTh1D]09IGRsq#o;^DTMo=-`ORu9V(Si/2[-U/&ak[#%;l3jcrSB."&g$5un@#GgEGct%D%Ysf1E^l,%9T.tA]DQXr9(Q^jfe[[bJ4#Ag[4IdIeqfK)#sTU?iK*ZmJjp#p4klFrUeQ'IJ`j;%^\mfm^[C!/Hi*X5Du]G-bI:i-q=RP@rq-0(+91rokMO#Rrhj+Qqu5^Os8;P>JNShbj$3M7a++$a\,Q]q$=o>~>%AI9_PrivateDataEnd